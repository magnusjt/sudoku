{"version":3,"sources":["core/utils/misc.ts","core/utils/sudokuUtils.ts","theme.ts","core/utils/effects.ts","core/solvers/basic.ts","core/solvers/singles.ts","core/solvers/pointer.ts","core/solvers/subset.ts","core/solvers/fish.ts","core/solvers/uniqueRectangle.ts","core/solvers/skyscraper.ts","core/solvers/emptyRectangle.ts","core/solvers/wing.ts","core/solvers/bruteForce.ts","core/solvers/chainGraph.ts","core/solvers/chains.ts","core/solvers/bug.ts","core/solvers/simpleColoring.ts","core/solve.ts","core/sudoku.ts","selectors.ts","gui/board.tsx","gui/solver.tsx","gui/puzzle-select.tsx","gui/digit-selector.tsx","gui/help.tsx","core/utils/hasUniqueSolution.ts","core/utils/generateName.ts","core/utils/getBoardMetaData.ts","gui/import-export.tsx","gui/hints.tsx","gui/app.tsx","state.ts","storage.ts","index.tsx"],"names":["getCombinations","items","len","initIndex","combos","i","length","rest","push","combo","isNotNull","x","first","iterable","Symbol","iterator","next","value","allResults","Array","from","filter","unique","arr","Set","uniqueBy","isEqual","result","forEach","a","some","b","difference","arr1","arr2","intersection","arrs","arraysEqual","every","groupBy","by","reduce","groups","item","key","memoize","fn","getKey","memo","hasOwnProperty","pointsEqual","pointA","pointB","id","allCandidates","fill","map","_","candidatesExcept","cands","getPointId","y","getAllPoints","points","getAllUnfilledPoints","board","p","getBoardCell","getColumn","col","getRow","row","getBox","point","box","xStart","Math","floor","yStart","getAllRows","rows","getAllCols","cols","getBoxX","boxNumber","getBoxY","getAllBoxes","boxes","k","getAllHouses","getBoxGroups","line","slice","getAllHousesMinusFilledPoints","getAffectedPoints","getRowsOutsideBox","boxY","getColsOutsideBox","boxX","getAffectedPointsInCommon","getRowNumber","getColNumber","getBoxNumber","isBoardFinished","cloneBoard","cell","candidates","pointsWhere","getPointsWithCandidates","cand","includes","getPointsWithNCandidates","n","canPutDigit","digit","boardHasError","solution","boardIsComplete","theme","createMuiTheme","palette","type","primary","main","secondary","text","typography","button","textTransform","textColor","backgroundColor","background","paper","backgroundDisabledColor","lighten","borderHardColor","darken","boardBackgroundColor","selectedColor","affectedColor","highlightedColor","highlightedCandidateColor","setCandidateColor","eliminateCandidateColor","actorCandidateColor","actorChainCandidateYesColor","getContrastText","effectsEqual","eff1","eff2","number","numbers","groupId","uniqueEffects","effects","removeCandidatesFromPoints","candidatesToRemove","removeCandidates","eff","addCandidatesToPoints","candidatesToAdd","addCandidates","removeCandidateFromPoints","removeCandidateFromAffectedPoints","toggleCandidate","applyEffects","effect","c","basicEliminationsGenerator","actors","f","basicElimination","fullHouseGenerator","nakedSingleGenerator","hiddenSingleGenerator","pointsWithCand","fullHouse","nakedSingle","hiddenSingle","pointerGenerator","inversePointerGenerator","pointsToRemove","pointer","inversePointer","nakedSubsetGenerator","subsetGenerator","pointsInside","pointsOutside","flatMap","subsetPointLists","flat","nakedPair","hiddenPair","nakedTriple","hiddenTriple","nakedQuad","hiddenQuad","fishGenerator","finnedFishGenerator","getFishResult","fishPoints","getLineNumber","getLine","lines","Object","values","pointsOnLines","minInstancesPerHouse","allPoints","rowsWithLen","colsWithLen","allowSashimi","fishPointsIncludingFins","possibleLines","fins","fishLinePoints","pointsToRemoveIfRegularFish","pointsToRemoveIfFin","possibleRows","possibleCols","xWing","swordfish","jellyfish","xWingFinned","xWingFinnedSashimi","swordfishFinned","swordfishFinnedSashimi","jellyfishFinned","jellyfishFinnedSashimi","findNakedPairs","pairs","pointsWith2Cands","j","uniqueRectangle1","pair","matchingPairs","colPair","corners","xs","ys","missingCorner","hiddenRectangle","unfilledPoints","biValuePoints","startingCorner","rowCorner","colCorner","oppositeCorner","oppositeCell","hiddenRect","affected","hp","skyscraperGenerator","getSkyscraperResult","skyscraperPoints","pointsOnLine","pointsToCheck","affectedInCommon","rowsWithTwo","colsWithTwo","skyscraper","emptyRectangleGenerator","getResult","pairHouse","erPoints","pointerX","pointerY","pointToRemove","otherPoint","find","pairHouses","colNumbers","pointerLines","colNumber","wholeColumn","restPoints","emptyRectangle","xyWingGenerator","xyzWingGenerator","wWingGenerator","pivot","affectedBiValuesPoints","xy","zValues","z","pincer1","pincer2","triValuePoints","pivotCands","candidatesEqual","cands1","cands2","house","pointsWithX","affected1","affected2","w","wx","wxPoints1","wxPoints2","common","xyWing","xyzWing","wWing","generateBruteForceDigits","clonedBoard","solve","bruteForce","getPointKey","getGroupId","group","join","getLinks","node","effectsIfTrue","effectsIfFalse","groupEffectsIfTrue","groupEffectsIfFalse","prev","getNakedSingle","getHiddenSingles","getSingleFalseSingleEffects","getSingleFalseGroupEffects","getGroupFalseGroupEffects","getSingleTrueSingleEffects","getSingleTrueGroupEffects","allGroups","singleTrueSingleEffects","getGroupTrueGroupEffects","getGroupFalseSingleEffects","falseGroup","isColumn","isRow","housesToCheck","trueGroup","sameBox","sameCol","sameRow","getGroupTrueSingleEffects","groupTrueSingleEffects","groupEffects","createTable","withGroups","sort","groupsTable","createGroupTable","table","link","links","getAllLinks","getNodePoints","linkIsInternalWithinPoint","getSeenKeys","iterateChainsInTable","keepLink","check","maxDepth","isValidNextLink","chain","seen","last","requiredLinkType","lastWasInternal","nextIsInternal","has","queue","queueItem","firstLink","lastLink","isLoop","nextLinks","nextLink","chainToActors","chainSet","chainIsAlternatingInternal","remotePairChain","start","end","xChain","xyChain","getDiscontinuousNiceLoop","getContinuousNiceLoop","pointsInChain","weakSingleLinks","prevPoints","nextPoints","prevBoxes","nextBoxes","prevCols","nextCols","prevRows","nextRows","getAicType1","getAicType2","point1","point2","isGrouped","aicType1","findChain","aicType2","aicType1Grouped","aicType2Grouped","discontinuousNiceLoop","discontinuousNiceLoopGrouped","continuousNiceLoop","continuousNiceLoopGrouped","bugPlus1Generator","hasBug","occurrences","unfilled","triValuePoint","triValueCell","extraCand","bug","bugPlus1","simpleColoringGenerator","oppositeColor","color","getNextQueueItems","pointKey","colorFromPoint","startingPoint","startingKey","colors","shift","candsWithPoints","checked","add","uncoloredPoints","uncoloredPoint","simpleColoring","techniques","difficulty","createTechniqueRunners","allowStopEarly","results","addResult","name","grouped","depth","shouldStopEarly","initialized","init","actorsDiff","effectsDiff","createFindChain","basic","difficulties","t","difficultyLevels","easy","medium","hard","expert","artisan","master","jedi","getSolution","applyTechniques","techniqueTypes","moreToGo","techType","techniqueRunners","tech","Error","res","applyBasicEliminations","allBasicEliminations","iterate","technique","runTechnique","boardFromStr","input","given","boardFromInput","matchAll","split","Number","applyInputValue","mode","toggleValue","prepareBoardForSolver","resetCandidates","selectSolution","createSelector","state","game","initialBoard","selectHasError","selectIsComplete","selectHints","hasError","getTechniquesUntilNextValue","selectPuzzles","puzzles","selectUserData","userData","Candidates","props","fontSize","height","style","display","gridTemplateColumns","gridTemplateRows","gap","width","fontFamily","bgs","justifyContent","alignItems","getCellBackgroundColor","selected","highlightedNumber","selectedDigit","hasElimination","cellHasElimination","hasSetValue","cellHasSetValue","hasActor","actor","cellHasActor","bg","CellDisplay","solveResult","celebration","React","useState","celebrationCounter","setCelebrationCount","useEffect","setTimeout","useMemo","candBgs","getCandidateBackgrounds","pointNumber","seed","round","border","borderColor","lineHeight","addHardBorder","side","cellHeight","BoardDisplay","isSelecting","setIsSelecting","ref","useRef","setHeight","setHeightAndRequest","current","clientWidth","clientHeight","currentWidth","currentHeight","min","setBoardHeightDom","window","requestAnimationFrame","solutionBoard","useSelector","selectedCells","affectedPoints","addSelect","actions","addSelectedCell","endSelect","useCallback","useEventListener","position","zIndex","data-x","data-y","className","onMouseDown","e","ctrlKey","setSelectedCells","startSelect","onMouseOver","onMouseUp","onTouchStart","startSelectTouch","onTouchMove","loc","touches","target","document","elementFromPoint","clientX","clientY","actualTarget","closest","xStr","getAttribute","yStr","onTouchCancel","onTouchEnd","pointToStr","Solver","onSolveResult","skippedTechniques","setSkippedTechniques","isMobile","useMediaQuery","mobileMediaQuery","onToggleTechnique","s","boardBeforeSolve","Button","variant","fullWidth","onClick","onPlayFromHere","flexDirection","skipped","size","PuzzleSelect","puzzleData","selectedTab","setSelectedTab","showTechniques","setShowTechniques","custom","Date","date","meta","puzzle","maxNumberOfTechniques","max","Table","TableHead","TableRow","TableCell","align","TableBody","solved","boardData","hasProgress","progress","hover","Typography","LinearProgress","onPuzzleSelect","mobileTable","Paper","padding","marginBottom","marginLeft","marginRight","marginTop","overflowX","disabled","Divider","flex","minHeight","overflowY","DigitCircle","bgColor","finished","font","cursor","outline","borderRadius","margin","DigitSelector","finishedDigits","digits","entries","d","getFinishedDigits","flexWrap","paddingRight","onClickDigit","techniqueDescriptions","uniqueRectangle","Help","href","rel","Accordion","AccordionSummary","AccordionDetails","trim","getSolutionCount","count","adjectives","subject","rand","random","generateName","str","toUpperCase","getBoardMetaData","getTechniquesRequiredForSolvingBoard","reverse","level","getOverallDifficulty","givens","String","mergeUserData","oldData","newData","ImportExport","importState","setImportState","importBoardStr","setImportBoardStr","boardStrValidation","setBoardStrValidation","onImport","obj","JSON","parse","isArray","looksLikeUserData","newUserData","setUserData","err","onImportBoardStr","hasUniqueSolution","toISOString","onExport","time","format","fileName","fileType","blob","Blob","createElement","download","URL","createObjectURL","dataset","downloadurl","body","appendChild","click","removeChild","revokeObjectURL","downloadJsonStr","stringify","onDrop","acceptedFiles","file","reader","FileReader","onload","readAsText","useDropzone","maxFiles","getRootProps","getInputProps","TextField","onChange","placeholder","Hints","hints","dummyBoard","App","hintsOpen","setHintsOpen","puzzleSelectOpen","setPuzzleSelectOpen","importExportOpen","setImportExportOpen","helpOpen","setHelpOpen","inputMode","solverState","solver","boardStack","boardMetaData","isComplete","toggleSolver","toggleHints","onSetDigit","setDigit","onSelectDigit","selectDigit","clearSelected","onGlobalKeyDown","toLowerCase","setInputMode","undo","test","parseInt","maxWidth","paddingLeft","undefined","right","opacity","setSolveResult","playFromSolver","Dialog","open","onClose","fromProgress","startPuzzle","initialState","deserialize","data","localStorageSet","localStorage","setItem","storage","store","middleware","applyMiddleware","prevUserData","getState","action","currUserData","createStorageMiddleware","enhancer","composeWithDevTools","createStore","dispatch","setState","setPuzzles","startGame","metaData","originalBoard","boardStr","boardToStr","createActions","getItem","localStorageGet","fetch","process","then","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","getElementById"],"mappings":"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hD,EAAO,CAACtD,IAAGkD,IAAGR,GAAIO,EAAWjD,EAAGkD,IAAKmD,KAChD/C,EAAMJ,GAAGlD,GAAGM,MAAQ+F,GACpB6jB,GAASD,EAAiB3mB,EAAOtD,EAAE,EAAEkD,KACzB,IAJGmD,KAWvB,OADA/C,EAAMJ,GAAGlD,GAAGM,MAAQ,KACb4pB,GC/BLC,GAAa,CACf5O,KAAM,CACF,OACA,WACA,UACA,QACA,QACA,WACA,WACA,OACA,eACA,YACA,OACA,WACA,UACA,aACA,OACA,aAEJC,OAAQ,CACJ,WACA,WACA,cACA,QACA,UACA,YACA,SACA,SACA,SACA,QACA,QACA,aACA,OACA,QACA,QACA,QACA,UACA,gBAEJC,KAAM,CACF,OACA,SACA,SACA,YACA,aACA,SACA,WACA,UACA,QACA,SACA,SACA,SACA,UACA,QACA,SACA,UACA,SACA,UAEJC,OAAQ,CACJ,QACA,UACA,UACA,cACA,WACA,aACA,aACA,aACA,UACA,eACA,cACA,SACA,cACA,YACA,cACA,YACA,WACA,QACA,WAEJC,QAAS,CACL,YACA,aACA,YACA,UACA,aACA,WACA,aACA,WACA,cACA,gBACA,eACA,cACA,eACA,eACA,WACA,YACA,YACA,aACA,aAEJC,OAAQ,CACJ,OACA,QACA,YACA,UACA,eACA,aACA,UACA,UACA,SACA,YACA,OACA,eACA,UACA,OACA,SACA,QACA,WACA,YACA,aACA,WACA,UAEJC,KAAM,CACF,cACA,WACA,UACA,UACA,YACA,aACA,WACA,WACA,WACA,gBACA,kBACA,iBACA,eACA,eACA,YACA,cACA,cAIFuO,GAAU,CACZ7O,KAAM,CACF,aACA,QACA,YACA,WACA,SACA,mBACA,QACA,MACA,WACA,SACA,cACA,UACA,MACA,WACA,aACA,eAEJC,OAAQ,CACJ,YACA,QACA,YACA,eACA,YACA,UACA,gBACA,eACA,SACA,UACA,eACA,cACA,aACA,UACA,gBACA,cACA,iBACA,QACA,WAEJC,KAAM,CACF,YACA,iBACA,cACA,WACA,UACA,SACA,UACA,OACA,WACA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","file":"static/js/main.91934248.chunk.js","sourcesContent":["export const getCombinations = <T>(items: T[], len: number, initIndex = 0): T[][] => {\r\n    if(len === 0) return []\r\n    const combos: T[][] = []\r\n    // NB: Stop loop before it gets so far as to not have enough items left for a full combo\r\n    for(let i = initIndex; i < items.length-len+1; i++){\r\n        const rest = getCombinations(items, len - 1, i + 1)\r\n        if(rest.length === 0){\r\n            combos.push([items[i]])\r\n        }\r\n        for(let combo of rest){\r\n            combos.push([items[i], ...combo])\r\n        }\r\n    }\r\n    return combos\r\n}\r\n\r\nconst isNotNull = <T>(x: T): x is Exclude<T, null> => x !== null\r\n\r\nexport const first = <T>(iterable: Iterable<T | null>): T | null => iterable[Symbol.iterator]().next().value\r\nexport const allResults = <T>(iterable: Iterable<T | null>): T[] =>\r\n    Array.from(iterable).filter(isNotNull)\r\n\r\nexport const unique = <T>(arr: T[]): T[] => [...new Set(arr)]\r\nexport const uniqueBy = <T>(arr: T[], isEqual): T[] => {\r\n    const result: T[] = []\r\n    arr.forEach(a => {\r\n        if(!result.some(b => isEqual(a, b))){\r\n            result.push(a)\r\n        }\r\n    })\r\n    return result\r\n}\r\nexport const difference = <T>(arr1: T[], arr2: T[], isEqual): T[] => {\r\n    return arr1.filter(a => !arr2.some(b => isEqual(a, b)))\r\n}\r\nexport const intersection = <T>(arrs: T[][], isEqual): T[] => {\r\n    if (arrs.length === 0) return []\r\n    let result = [...arrs[0]]\r\n    for (let i = 1; i < arrs.length; i++) {\r\n        result = result.filter(a => arrs[i].some(b => isEqual(a, b)))\r\n    }\r\n    return result\r\n}\r\nexport const arraysEqual = (arr1, arr2, isEqual = (a, b) => a === b) => {\r\n    return arr1.length === arr2.length && arr1.every((a, i) => isEqual(a, arr2[i]))\r\n}\r\ntype Groups<T> = {[key: string]: T[]}\r\nexport const groupBy = <T>(arr: T[], by): Groups<T> => {\r\n    return arr.reduce((groups, item) => {\r\n        const key = by(item)\r\n        groups[key] = (groups[key] ?? [])\r\n        groups[key].push(item)\r\n        return groups\r\n    }, {})\r\n}\r\n\r\nexport const memoize = <T extends Function>(fn: T, getKey): T => {\r\n    let memo = {}\r\n    return ((...args) => {\r\n        const key = getKey(...args)\r\n        if(memo.hasOwnProperty(key)) return memo[key]\r\n        const result = fn(...args)\r\n        memo[key] = result\r\n        return result\r\n    }) as unknown as T\r\n}\r\n\r\nexport const rand = (n: number) => Math.floor((Math.random()*n))\r\nexport const randIndex = list => rand(list.length)\r\n\r\nexport const randomOrder = (list) => {\r\n    list = [...list]\r\n    for(let i = 0; i < list.length; i++){\r\n        const ri = randIndex(list)\r\n        const tmp = list[i]\r\n        list[i] = list[ri]\r\n        list[ri] = tmp\r\n    }\r\n    return list\r\n}\r\n\r\nexport const capitalize = (str: string) => {\r\n    return str[0].toUpperCase() + str.slice(1)\r\n}","import { Point, Board, Cell, TechniqueResult, Effect } from '../types'\r\nimport { arraysEqual, difference, intersection, memoize } from './misc'\r\n\r\nexport const pointsEqual = (pointA: Point, pointB: Point) => pointA.id === pointB.id\r\nexport const pointListsEqual = (pointsA: Point[], pointsB: Point[]) => arraysEqual(pointsA, pointsB, pointsEqual)\r\n\r\nexport const allCandidates = Array(9).fill(0).map((_, i) => i + 1)\r\n\r\nexport const candidatesExcept = (cands: number[]) => difference(allCandidates, cands, (a,b) => a === b)\r\n\r\nexport const getPointId = (x, y) => y * 9 + x\r\n\r\nexport const getAllPoints = memoize((): Point[] => {\r\n    const points: Point[] = []\r\n    for(let x = 0; x < 9; x++){\r\n        for(let y = 0; y < 9; y++){\r\n            points.push({x, y, id: getPointId(x, y)})\r\n        }\r\n    }\r\n    return points\r\n}, () => '')\r\n\r\nexport const getAllUnfilledPoints = (board: Board): Point[] => getAllPoints().filter(p => getBoardCell(board, p).value === null)\r\n\r\nexport const getColumn = memoize((x: number): Point[] => {\r\n    const col: Point[] = []\r\n    for(let y = 0; y < 9; y++){\r\n        col.push({x, y, id: getPointId(x, y)})\r\n    }\r\n    return col\r\n}, (x) => x)\r\n\r\nexport const getRow = memoize((y: number): Point[] => {\r\n    const row: Point[] = []\r\n    for(let x = 0; x < 9; x++){\r\n        row.push({x, y, id: getPointId(x, y)})\r\n    }\r\n    return row\r\n}, y => y)\r\n\r\nexport const getBox = memoize((point: Point): Point[] => {\r\n    const box: Point[] = []\r\n    const xStart = Math.floor(point.x/3)*3\r\n    const yStart = Math.floor(point.y/3)*3\r\n    for(let x = xStart; x < xStart + 3; x++){\r\n        for(let y = yStart; y < yStart + 3; y++){\r\n            box.push({x, y, id: getPointId(x, y)})\r\n        }\r\n    }\r\n    return box\r\n}, p => `${p.x}-${p.y}`)\r\n\r\nexport const getAllRows = memoize((): Point[][] => {\r\n    const rows: Point[][] = []\r\n    for(let y = 0; y < 9; y++){\r\n        rows.push(getRow(y))\r\n    }\r\n    return rows\r\n}, () => 'T')\r\n\r\nexport const getAllCols = memoize((): Point[][] => {\r\n    const cols: Point[][] = []\r\n    for(let x = 0; x < 9; x++){\r\n        cols.push(getColumn(x))\r\n    }\r\n    return cols\r\n}, () => 'T')\r\n\r\nexport const getBoxX = (boxNumber: number) => (boxNumber % 3) * 3\r\nexport const getBoxY = (boxNumber: number) => Math.floor(boxNumber / 3) * 3\r\n\r\nexport const getAllBoxes = memoize((): Point[][] => {\r\n    const boxes: Point[][] = []\r\n    for(let k = 0; k < 9; k++){\r\n        const x = getBoxX(k)\r\n        const y = getBoxY(k)\r\n        boxes.push(getBox({x, y, id: getPointId(x, y)}))\r\n    }\r\n    return boxes\r\n}, () => 'T')\r\n\r\nexport const getAllHouses = memoize((): Point[][] => {\r\n    return [\r\n        ...getAllRows(),\r\n        ...getAllCols(),\r\n        ...getAllBoxes()\r\n    ]\r\n}, () => 'T')\r\n\r\nexport const getBoxGroups = memoize(() => {\r\n    const groups: Point[][] = []\r\n    for(let line of [...getAllRows(), ...getAllCols()]){\r\n        groups.push(\r\n            line.slice(0, 3),\r\n            line.slice(3, 6),\r\n            line.slice(6, 9)\r\n        )\r\n    }\r\n    return groups\r\n}, () => 'T')\r\n\r\nexport const getAllHousesMinusFilledPoints = (board: Board): Point[][] => getAllHouses()\r\n    .map(points => points.filter(p => getBoardCell(board, p).value === null))\r\n    .filter(points => points.length > 0)\r\n\r\nexport const getAffectedPoints = (point: Point): Point[] => {\r\n    return [\r\n        ...getColumn(point.x),\r\n        ...getRow(point.y),\r\n        ...getBox(point)\r\n    ].filter(p => !pointsEqual(p, point))\r\n}\r\n\r\nexport const pointsSeeEachOther = (point1: Point, point2: Point) => {\r\n    return point1.x === point2.x || point1.y === point2.y || getBoxNumber(point1) === getBoxNumber(point2)\r\n}\r\n\r\nexport const getRowsOutsideBox = boxNumber => {\r\n    const boxY = getBoxY(boxNumber)\r\n    return getAllRows().filter(points => points[0].y < boxY || points[0].y >= boxY + 3)\r\n}\r\nexport const getColsOutsideBox = boxNumber => {\r\n    const boxX = getBoxX(boxNumber)\r\n    return getAllCols().filter(points => points[0].x < boxX || points[0].x >= boxX + 3)\r\n}\r\n\r\n// Finds every point which \"sees\" all of the given points\r\nexport const getAffectedPointsInCommon = (points: Point[]): Point[] => {\r\n    return intersection(points.map(getAffectedPoints), pointsEqual)\r\n}\r\n\r\nexport const getRowNumber = (point: Point) => point.y\r\nexport const getColNumber = (point: Point) => point.x\r\nexport const getBoxNumber = (point: Point) => (Math.floor(point.x / 3)) + (3 * Math.floor(point.y/3))\r\n\r\nexport const getBoardCell = (board: Board, point: Point) => board[point.y][point.x]\r\n\r\nexport const isBoardFinished = (board: Board) => {\r\n    return getAllPoints().every(point => getBoardCell(board, point).value !== null)\r\n}\r\n\r\nexport const cloneBoard = (board: Board) => {\r\n    return [...board].map(row => [...row].map(cell => {\r\n        return {\r\n            ...cell,\r\n            candidates: [...cell.candidates]\r\n        }\r\n    }))\r\n}\r\n\r\nexport const pointsWhere = (board: Board, points: Point[], filter: (cell: Cell) => boolean): Point[] =>\r\n    points.filter(point => filter(getBoardCell(board, point)))\r\n\r\nexport const getPointsWithCandidates = (board: Board, points: Point[], cands: number[]) =>\r\n    pointsWhere(board, points, (cell) => cands.every(cand => cell.candidates.includes(cand)))\r\n\r\nexport const getPointsWithNCandidates = (board: Board, points: Point[], n: number) =>\r\n    pointsWhere(board, points, (cell) => cell.candidates.length === n)\r\n\r\nexport const canPutDigit = (board: Board, point: Point, digit: number) => {\r\n    const affected = getAffectedPoints(point)\r\n    return !affected.some(p => getBoardCell(board, p).value === digit)\r\n}\r\n\r\nexport const boardHasError = (board: Board, solution: Board) => {\r\n    return !getAllPoints().every(point => {\r\n        const value = getBoardCell(board, point).value\r\n        return value === null || getBoardCell(solution, point).value === value\r\n    })\r\n}\r\n\r\nexport const boardIsComplete = (board: Board) => {\r\n    return getAllPoints().every(point => getBoardCell(board, point).value !== null)\r\n}\r\n\r\nexport const mergeResults = <T extends Effect>(results: TechniqueResult<T>[]) => {\r\n    return results.reduce((allResults, result) => {\r\n        allResults.effects.push(...result.effects)\r\n        allResults.actors.push(...result.actors)\r\n        return allResults\r\n    }, {effects: [], actors: []} as TechniqueResult<T>)\r\n}","import { createMuiTheme, darken, lighten } from '@material-ui/core/styles'\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        primary: {\r\n            main: '#72d282',\r\n        },\r\n        secondary: {\r\n            main: '#80DEEA',\r\n        },\r\n        text: {\r\n            primary: '#efefef'\r\n        },\r\n    },\r\n    typography: {\r\n        button: {\r\n            textTransform: 'none'\r\n        }\r\n    }\r\n})\r\n\r\nexport const textColor = theme.palette.text.primary\r\nexport const backgroundColor = theme.palette.background.paper\r\nexport const backgroundDisabledColor = lighten(theme.palette.background.paper, 0.2)\r\nexport const borderHardColor = darken(textColor, 0.5)\r\n\r\nexport const boardBackgroundColor = lighten(theme.palette.background.paper, 0.1)\r\nexport const boardBorderColor = '#444'\r\nexport const boardBorderHardColor = '#333'\r\n\r\n/*\r\nLight\r\nexport const actorColor = '#c5f6b0'\r\nexport const setValueColor = '#85ffff'\r\nexport const eliminationColor = '#b0c9f6'\r\nexport const selectedColor = '#ffc0b0'\r\nexport const affectedColor = backgroundSecondaryColor\r\nexport const highlightedColor = '#ffc0b0'\r\nexport const selectedDigitHighlightColor = '#ffd0b0'\r\nexport const errorColor = '#fc4444'\r\n */\r\n\r\nexport const actorColor = '#d3bef8'\r\nexport const setValueColor = '#94fa96'\r\nexport const eliminationColor = '#f67467'\r\nexport const selectedColor = darken(theme.palette.primary.main, 0.3)\r\nexport const affectedColor = darken(selectedColor, 0.3)\r\nexport const highlightedColor = selectedColor\r\nexport const highlightedCandidateColor = lighten(selectedColor, 0.15)\r\nexport const selectedDigitHighlightColor = '#66c187'\r\nexport const errorColor = '#fc4444'\r\n\r\nexport const setCandidateColor = darken(setValueColor, 0.1)\r\nexport const eliminateCandidateColor = darken(eliminationColor, 0.2)\r\nexport const actorCandidateColor = darken(actorColor, 0.2)\r\nexport const actorChainCandidateYesColor = darken(setValueColor, 0.2)\r\nexport const actorChainCandidateNoColor = '#2475ff'\r\n\r\nexport const getContrastText = theme.palette.getContrastText","import {\r\n    AddCandidatesEffect,\r\n    Board,\r\n    Effect,\r\n    EliminationEffect, GroupEffect,\r\n    NoneEffect,\r\n    Point,\r\n    RemoveValueEffect,\r\n    SetValueEffect\r\n} from '../types'\r\nimport { cloneBoard, getAffectedPoints, getBoardCell, pointsEqual } from './sudokuUtils'\r\nimport { arraysEqual, unique, uniqueBy } from './misc'\r\n\r\nexport const removeCandidates = (board: Board, point: Point, numbers: number[]): EliminationEffect | NoneEffect => {\r\n    const cell = getBoardCell(board, point)\r\n    const candidatesToRemove = cell.candidates.filter(x => numbers.includes(x))\r\n    if(candidatesToRemove.length === 0 || cell.value !== null){\r\n        return {type: 'none'} as NoneEffect\r\n    }\r\n    return {type: 'elimination', point, numbers: candidatesToRemove}\r\n}\r\n\r\nexport const addCandidates = (board: Board, point: Point, numbers: number[]): AddCandidatesEffect | NoneEffect => {\r\n    const cell = getBoardCell(board, point)\r\n    const candidatesToAdd = numbers.filter(x => !cell.candidates.includes(x))\r\n    if(candidatesToAdd.length === 0 || cell.value !== null){\r\n        return {type: 'none'} as NoneEffect\r\n    }\r\n    return {type: 'addCandidates', point, numbers: candidatesToAdd}\r\n}\r\n\r\nexport const effectsEqual = (eff1: Effect | GroupEffect, eff2: Effect | GroupEffect) => {\r\n    if(eff1.type === 'value' && eff2.type === 'value'){\r\n        return pointsEqual(eff1.point, eff2.point) && eff1.number === eff2.number\r\n    }else if(eff1.type === 'elimination' && eff2.type === 'elimination'){\r\n        return pointsEqual(eff1.point, eff2.point) && arraysEqual(eff1.numbers, eff2.numbers, (a, b) => a === b)\r\n    }else if(eff1.type === 'group-elimination' && eff2.type === 'group-elimination'){\r\n        return eff1.groupId === eff2.groupId && eff1.number === eff2.number\r\n    }else if(eff1.type === 'group-value' && eff2.type === 'group-value'){\r\n        return eff1.groupId === eff2.groupId && eff1.number === eff2.number\r\n    }\r\n    return false\r\n}\r\n\r\nexport const uniqueEffects = <T extends Effect | GroupEffect>(effects: T[]) => uniqueBy(effects, effectsEqual)\r\n\r\nexport const removeCandidatesFromPoints = (board: Board, points: Point[], numbers: number[]): EliminationEffect[] => {\r\n    const effects = points\r\n        .map(point => removeCandidates(board, point, numbers))\r\n        .filter(eff => eff.type !== 'none') as EliminationEffect[]\r\n\r\n    return uniqueEffects(effects)\r\n}\r\n\r\nexport const addCandidatesToPoints = (board: Board, points: Point[], numbers: number[]): AddCandidatesEffect[] => {\r\n    return points\r\n        .map(point => addCandidates(board, point, numbers))\r\n        .filter(eff => eff.type !== 'none') as AddCandidatesEffect[]\r\n}\r\n\r\nexport const removeCandidateFromPoints = (board: Board, points: Point[], number: number): EliminationEffect[] => {\r\n    return removeCandidatesFromPoints(board, points, [number])\r\n}\r\n\r\nexport const removeCandidateFromAffectedPoints = (board: Board, point: Point, number: number): EliminationEffect[] => {\r\n    return removeCandidateFromPoints(board, getAffectedPoints(point), number)\r\n}\r\n\r\nexport const toggleCandidate = (board: Board, points: Point[], digit: number): AddCandidatesEffect[] | EliminationEffect[] => {\r\n    const addCand = !points.every(p => {\r\n        const cell = getBoardCell(board, p)\r\n        return cell.value !== null || cell.candidates.includes(digit)\r\n    })\r\n\r\n    if(addCand){\r\n        return addCandidatesToPoints(board, points, [digit])\r\n    }else{\r\n        return removeCandidatesFromPoints(board, points, [digit])\r\n    }\r\n}\r\n\r\nexport const toggleValue = (board: Board, point: Point, digit: number): (SetValueEffect | EliminationEffect)[] | RemoveValueEffect[] => {\r\n    const cell = getBoardCell(board, point)\r\n    if(cell.given){\r\n        return []\r\n    }\r\n    if(cell.value === digit){\r\n        return [{type: 'value', point, number: null}]\r\n    }else{\r\n        return [\r\n            {type: 'value', point, number: digit},\r\n            ...removeCandidateFromAffectedPoints(board, point, digit)\r\n        ]\r\n    }\r\n}\r\n\r\nexport const applyEffects = (board: Board, effects: Effect[]) => {\r\n    board = cloneBoard(board)\r\n\r\n    effects.forEach(effect => {\r\n        if(effect.type === 'elimination') {\r\n            board[effect.point.y][effect.point.x].candidates = board[effect.point.y][effect.point.x].candidates.filter(c => !effect.numbers.includes(c))\r\n        }else if(effect.type === 'addCandidates'){\r\n            board[effect.point.y][effect.point.x].candidates.push(...effect.numbers)\r\n            board[effect.point.y][effect.point.x].candidates = unique(board[effect.point.y][effect.point.x].candidates)\r\n        }else if(effect.type === 'value'){\r\n            board[effect.point.y][effect.point.x].value = effect.number\r\n            board[effect.point.y][effect.point.x].candidates = []\r\n        }\r\n    })\r\n\r\n    return board\r\n}\r\n","import { SolverBoard } from '../types'\r\nimport { removeCandidateFromAffectedPoints } from '../utils/effects'\r\nimport { allResults, first  } from '../utils/misc'\r\nimport { getAllPoints, getBoardCell } from '../utils/sudokuUtils'\r\n\r\n/**\r\n * Just removes candidates from row, col, and box where the candidate is set as a value.\r\n * I.e. Use only the basic constraints of sudoku.\r\n */\r\nfunction *basicEliminationsGenerator(board: SolverBoard){\r\n    for(let point of getAllPoints()){\r\n        const cell = getBoardCell(board, point)\r\n        if(cell.value === null){\r\n            continue\r\n        }\r\n\r\n        const effects = removeCandidateFromAffectedPoints(board, point, cell.value)\r\n        const actors = [{point}]\r\n\r\n        if(effects.length > 0){\r\n            yield {effects, actors}\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport const basicElimination = (board: SolverBoard) => first(basicEliminationsGenerator(board))\r\nexport const allBasicEliminations = (board: SolverBoard) => allResults(basicEliminationsGenerator(board))","import { SetValueEffect, SolverBoard } from '../types'\r\nimport { getAllHousesMinusFilledPoints, getAllPoints, getBoardCell, pointsEqual } from '../utils/sudokuUtils'\r\nimport { removeCandidateFromAffectedPoints } from '../utils/effects'\r\nimport { allResults, difference, first } from '../utils/misc'\r\n\r\nfunction *fullHouseGenerator(board: SolverBoard){\r\n    for(let points of getAllHousesMinusFilledPoints(board)){\r\n        if(points.length === 1){\r\n            const point = points[0]\r\n            const cell = getBoardCell(board, point)\r\n            const candidates = cell.candidates\r\n            if(candidates.length === 1){ // Should always be true, but whatever...\r\n                yield {\r\n                    actors: [{point}],\r\n                    effects: [\r\n                        {type: 'value', point, number: cell.candidates[0]} as SetValueEffect,\r\n                        ...removeCandidateFromAffectedPoints(board, point, cell.candidates[0])\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * There is only one candidate in a cell. Can be filled immediately.\r\n */\r\nfunction *nakedSingleGenerator(board: SolverBoard){\r\n    for(let point of getAllPoints()){\r\n        const cell = getBoardCell(board, point)\r\n        if(cell.candidates.length === 1){\r\n            yield {\r\n                actors: [{point}],\r\n                effects: [\r\n                    {type: 'value', point, number: cell.candidates[0]} as SetValueEffect,\r\n                    ...removeCandidateFromAffectedPoints(board, point, cell.candidates[0])\r\n                ]\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\n/**\r\n * The candidate is only in one position in the box, row, or column, and is hidden among other candidates\r\n * All naked singles must be eliminated first or else we find them as hidden singles\r\n */\r\nfunction *hiddenSingleGenerator(board: SolverBoard){\r\n    for(let points of getAllHousesMinusFilledPoints(board)){\r\n        for(let cand = 1; cand <= 9; cand++){\r\n            const pointsWithCand = points.filter(p => getBoardCell(board, p).candidates.some(c => c === cand))\r\n            if(pointsWithCand.length === 1){\r\n                const point = pointsWithCand[0]\r\n                if(getBoardCell(board, point).candidates.length > 1){ // Otherwise it is naked\r\n                    yield {\r\n                        effects: [\r\n                            {type: 'value', point, number: cand} as SetValueEffect,\r\n                            ...removeCandidateFromAffectedPoints(board, point, cand)\r\n                        ],\r\n                        actors: difference(points, [point], pointsEqual).map(point => ({point}))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport const fullHouse = (board: SolverBoard) => first(fullHouseGenerator(board))\r\nexport const allFullHouses = (board: SolverBoard) => allResults(fullHouseGenerator(board))\r\n\r\nexport const nakedSingle = (board: SolverBoard) => first(nakedSingleGenerator(board))\r\nexport const allNakedSingles = (board: SolverBoard) => allResults(nakedSingleGenerator(board))\r\n\r\nexport const hiddenSingle = (board: SolverBoard) => first(hiddenSingleGenerator(board))\r\nexport const allHiddenSingles = (board: SolverBoard) => allResults(hiddenSingleGenerator(board))","import { SolverBoard, Point } from '../types'\r\nimport {\r\n    getAllBoxes, getAllCols, getAllRows, getBox, getBoxNumber,\r\n    getColNumber,\r\n    getColumn,\r\n    getPointsWithCandidates, getRow,\r\n    getRowNumber,\r\n    pointsEqual\r\n} from '../utils/sudokuUtils'\r\nimport { allResults, difference, first, unique } from '../utils/misc'\r\nimport { removeCandidateFromPoints } from '../utils/effects'\r\n\r\n/**\r\n * If all of a certain candidate within a box are on the same col or row, the rest of the col or row can be eliminated\r\n */\r\nfunction *pointerGenerator(board: SolverBoard){\r\n    for(let points of getAllBoxes()){\r\n        for(let cand = 1; cand <= 9; cand++){\r\n            const pointsWithCand = getPointsWithCandidates(board, points, [cand])\r\n            if(pointsWithCand.length === 1) continue // If it's only one, it's just a hidden single\r\n            if(pointsWithCand.length > 3) continue // Can't fit on a line in a box if more than 3\r\n\r\n            let pointsToRemove: Point[] = []\r\n            if(unique(pointsWithCand.map(getColNumber)).length === 1){\r\n                pointsToRemove = difference(getColumn(pointsWithCand[0].x), pointsWithCand, pointsEqual)\r\n            }else if(unique(pointsWithCand.map(getRowNumber)).length === 1){\r\n                pointsToRemove = difference(getRow(pointsWithCand[0].y), pointsWithCand, pointsEqual)\r\n            }\r\n            const effects = removeCandidateFromPoints(board, pointsToRemove, cand)\r\n            const actors = pointsWithCand.map(point => ({point, cand}))\r\n\r\n            if(effects.length > 0){\r\n                yield {effects, actors}\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\n/**\r\n * If all of a certain candidate within a row or col are in the same box, the rest of the box can be eliminated\r\n */\r\nfunction *inversePointerGenerator(board: SolverBoard){\r\n    for(let points of [...getAllRows(), ...getAllCols()]){\r\n        for(let cand = 1; cand <= 9; cand++){\r\n            const pointsWithCand = getPointsWithCandidates(board, points, [cand])\r\n            if(pointsWithCand.length === 1) continue // If it's only one, it's just a hidden single\r\n            if(pointsWithCand.length > 3) continue // Can't fit in a box if it's more than 3\r\n\r\n            if(unique(pointsWithCand.map(getBoxNumber)).length === 1){\r\n                const pointsToRemove = difference(getBox(pointsWithCand[0]), pointsWithCand, pointsEqual)\r\n                const effects = removeCandidateFromPoints(board, pointsToRemove, cand)\r\n                const actors = pointsWithCand.map(point => ({point, cand}))\r\n\r\n                if(effects.length > 0){\r\n                    yield {effects, actors}\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport const pointer = (board: SolverBoard) => first(pointerGenerator(board))\r\nexport const allPointers = (board: SolverBoard) => allResults(pointerGenerator(board))\r\n\r\nexport const inversePointer = (board: SolverBoard) => first(inversePointerGenerator(board))\r\nexport const allInversePointers = (board: SolverBoard) => allResults(inversePointerGenerator(board))","import { SolverBoard } from '../types'\r\nimport {\r\n    allCandidates, candidatesExcept,\r\n    getAllHousesMinusFilledPoints,\r\n    getBoardCell,\r\n    getPointsWithCandidates,\r\n    pointsEqual\r\n} from '../utils/sudokuUtils'\r\nimport { allResults, difference, first, getCombinations, uniqueBy } from '../utils/misc'\r\nimport { removeCandidatesFromPoints } from '../utils/effects'\r\n\r\nfunction *nakedSubsetGenerator(board: SolverBoard, len: number){\r\n    for(let points of getAllHousesMinusFilledPoints(board)){\r\n        for(let candidates of getCombinations(allCandidates, len)){\r\n            const pointsInside = points.filter(p => getBoardCell(board, p).candidates.every(c => candidates.includes(c)))\r\n            if(pointsInside.length !== len) continue\r\n\r\n            const pointsOutside = difference(points, pointsInside, pointsEqual)\r\n\r\n            const effects = removeCandidatesFromPoints(board, pointsOutside, candidates)\r\n            const actors = pointsInside.flatMap(point => candidates.map(cand => ({ point, cand })))\r\n\r\n            if(effects.length > 0){\r\n                yield {effects, actors}\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfunction *subsetGenerator(board: SolverBoard, len: number){\r\n    const minInstanceEachCand = 2 // True for pair, triple, and quad. Just hardcode it.\r\n    for(let points of getAllHousesMinusFilledPoints(board)){\r\n        for(let candidates of getCombinations(allCandidates, len)){\r\n            const subsetPointLists = candidates.map(cand => getPointsWithCandidates(board, points, [cand]))\r\n            const everyCandIsRepresented = subsetPointLists.every(points => points.length >= minInstanceEachCand && points.length <= len)\r\n            if(!everyCandIsRepresented) continue\r\n\r\n            const pointsInside = uniqueBy(subsetPointLists.flat(), pointsEqual)\r\n            if(pointsInside.length !== len) continue\r\n\r\n            const pointsOutside = difference(points, pointsInside, pointsEqual)\r\n\r\n            const effects = [\r\n                ...removeCandidatesFromPoints(board, pointsOutside, candidates),\r\n                ...removeCandidatesFromPoints(board, pointsInside, candidatesExcept(candidates))\r\n            ]\r\n            const actors = pointsInside.flatMap(point => candidates.map(cand => ({ point, cand })))\r\n\r\n            if(effects.length > 0){\r\n                yield {effects, actors}\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport const nakedPair = (board: SolverBoard) => first(nakedSubsetGenerator(board, 2))\r\nexport const allNakedPairs = (board: SolverBoard) => allResults(nakedSubsetGenerator(board, 2))\r\n\r\nexport const hiddenPair = (board: SolverBoard) => first(subsetGenerator(board, 2))\r\nexport const allHiddenPairs = (board: SolverBoard) => allResults(subsetGenerator(board, 2))\r\n\r\nexport const nakedTriple = (board: SolverBoard) => first(nakedSubsetGenerator(board, 3))\r\nexport const allNakedTriples = (board: SolverBoard) => allResults(nakedSubsetGenerator(board, 3))\r\n\r\nexport const hiddenTriple = (board: SolverBoard) => first(subsetGenerator(board, 3))\r\nexport const allHiddenTriples = (board: SolverBoard) => allResults(subsetGenerator(board, 3))\r\n\r\nexport const nakedQuad = (board: SolverBoard) => first(nakedSubsetGenerator(board, 4))\r\nexport const allNakedQuads = (board: SolverBoard) => allResults(nakedSubsetGenerator(board, 4))\r\n\r\nexport const hiddenQuad = (board: SolverBoard) => first(subsetGenerator(board, 4))\r\nexport const allHiddenQuads = (board: SolverBoard) => allResults(subsetGenerator(board, 4))","import { Point, SolverBoard } from '../types'\r\nimport { allResults, difference, first, getCombinations, groupBy, intersection } from '../utils/misc'\r\nimport {\r\n    getAffectedPointsInCommon,\r\n    getAllUnfilledPoints, getColNumber,\r\n    getColumn,\r\n    getPointsWithCandidates, getRow,\r\n    getRowNumber,\r\n    pointsEqual\r\n} from '../utils/sudokuUtils'\r\nimport { removeCandidateFromPoints } from '../utils/effects'\r\n\r\nfunction *fishGenerator(board: SolverBoard, len: number){\r\n    const getFishResult = (fishPoints: Point[], getLineNumber, getLine, cand) => {\r\n        const lines = Object.values<Point[]>(groupBy(fishPoints, getLineNumber))\r\n        if(lines.length !== len) return null\r\n\r\n        const pointsOnLines = lines.flatMap(points => getLine(getLineNumber(points[0])))\r\n        const pointsToRemove = difference(pointsOnLines, fishPoints, pointsEqual)\r\n\r\n        const effects = removeCandidateFromPoints(board, pointsToRemove, cand)\r\n        const actors = fishPoints.map(point => ({point, cand}))\r\n\r\n        if(effects.length > 0){\r\n            return {effects, actors}\r\n        }\r\n    }\r\n\r\n    const minInstancesPerHouse = 2\r\n    const allPoints = getAllUnfilledPoints(board)\r\n\r\n    for(let cand = 1; cand <= 9; cand++){\r\n        const pointsWithCand = getPointsWithCandidates(board, allPoints, [cand])\r\n\r\n        const rowsWithLen = Object.values<Point[]>(groupBy(pointsWithCand, getRowNumber))\r\n            .filter(points => points.length >= minInstancesPerHouse && points.length <= len)\r\n\r\n        for(let rows of getCombinations(rowsWithLen, len)){\r\n            const result = getFishResult(rows.flat(), getColNumber, getColumn, cand)\r\n            if(result) yield result\r\n        }\r\n\r\n        const colsWithLen = Object.values<Point[]>(groupBy(pointsWithCand, getColNumber))\r\n            .filter(points => points.length >= minInstancesPerHouse && points.length <= len)\r\n\r\n        for(let cols of getCombinations(colsWithLen, len)){\r\n            const result = getFishResult(cols.flat(), getRowNumber, getRow, cand)\r\n            if(result) yield result\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfunction *finnedFishGenerator(board: SolverBoard, len: number, allowSashimi: boolean){\r\n    const getFishResult = (fishPointsIncludingFins: Point[], getLineNumber, getLine, cand) => {\r\n        const possibleLines = Object.values<Point[]>(groupBy(fishPointsIncludingFins, getLineNumber))\r\n\r\n        for(let lines of getCombinations(possibleLines, len)){\r\n            if (lines.some(line => line.length === 1) && !allowSashimi) {\r\n                continue\r\n            }\r\n            const fishPoints = lines.flatMap(points => points)\r\n            const fins = difference(fishPointsIncludingFins, fishPoints, pointsEqual)\r\n            const fishLinePoints = lines.flatMap(points => getLine(getLineNumber(points[0])))\r\n            const pointsToRemoveIfRegularFish = difference(fishLinePoints, fishPoints, pointsEqual)\r\n            const pointsToRemoveIfFin = getAffectedPointsInCommon(fins)\r\n\r\n            const pointsToRemove = intersection([pointsToRemoveIfRegularFish, pointsToRemoveIfFin], pointsEqual)\r\n\r\n            const effects = removeCandidateFromPoints(board, pointsToRemove, cand)\r\n            const actors = [\r\n                ...fishPoints.map(point => ({point, cand})),\r\n                ...fins.map(point => ({point, cand}))\r\n            ]\r\n\r\n            if(effects.length > 0){\r\n                return {effects, actors}\r\n            }\r\n        }\r\n    }\r\n\r\n    const allPoints = getAllUnfilledPoints(board)\r\n\r\n    for(let cand = 1; cand <= 9; cand++){\r\n        const pointsWithCand = getPointsWithCandidates(board, allPoints, [cand])\r\n\r\n        const possibleRows = Object.values<Point[]>(groupBy(pointsWithCand, getRowNumber))\r\n\r\n        for(let rows of getCombinations(possibleRows, len)){\r\n            const result = getFishResult(rows.flat(), getColNumber, getColumn, cand)\r\n            if(result) yield result\r\n        }\r\n\r\n        const possibleCols = Object.values<Point[]>(groupBy(pointsWithCand, getColNumber))\r\n\r\n        for(let cols of getCombinations(possibleCols, len)){\r\n            const result = getFishResult(cols.flat(), getRowNumber, getRow, cand)\r\n            if(result) yield result\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\n/**\r\n * Looks like 4 corners of a rectangle, where either the rows or cols are empty otherwise.\r\n * Two columns has the same candidate in only two rows. The rest of the rows can be eliminated\r\n * Two rows has the same candidate in only two cols. The rest of the columns can be eliminated.\r\n */\r\nexport const xWing = (board: SolverBoard) => first(fishGenerator(board, 2))\r\nexport const allXWings = (board: SolverBoard) => allResults(fishGenerator(board, 2))\r\n\r\nexport const swordfish = (board: SolverBoard) => first(fishGenerator(board, 3))\r\nexport const allSwordfish = (board: SolverBoard) => allResults(fishGenerator(board, 3))\r\n\r\nexport const jellyfish = (board: SolverBoard) => first(fishGenerator(board, 4))\r\nexport const allJellyfish = (board: SolverBoard) => allResults(fishGenerator(board, 4))\r\n\r\nexport const xWingFinned = (board: SolverBoard) => first(finnedFishGenerator(board, 2, false))\r\nexport const xWingFinnedSashimi = (board: SolverBoard) => first(finnedFishGenerator(board, 2, true))\r\nexport const swordfishFinned = (board: SolverBoard) => first(finnedFishGenerator(board, 3, false))\r\nexport const swordfishFinnedSashimi = (board: SolverBoard) => first(finnedFishGenerator(board, 3, true))\r\nexport const jellyfishFinned = (board: SolverBoard) => first(finnedFishGenerator(board, 4, false))\r\nexport const jellyfishFinnedSashimi = (board: SolverBoard) => first(finnedFishGenerator(board, 4, true))\r\n\r\n// NB: Larger fish can always be decomposed into smaller fish, so no point looking","import { SolverBoard, Point, EliminationEffect } from '../types'\r\nimport {\r\n    getAffectedPoints,\r\n    getAllRows, getAllUnfilledPoints,\r\n    getBoardCell,\r\n    getBoxNumber,\r\n    getColumn, getPointId, getPointsWithCandidates,\r\n    getPointsWithNCandidates, getRow,\r\n    pointsEqual\r\n} from '../utils/sudokuUtils'\r\nimport { difference, groupBy, unique, uniqueBy } from '../utils/misc'\r\nimport { removeCandidatesFromPoints } from '../utils/effects'\r\n\r\nconst findNakedPairs = (board: SolverBoard, points: Point[]) => {\r\n    const pairs: {points: Point[], candidates: number[]}[] = []\r\n    const pointsWith2Cands = getPointsWithNCandidates(board, points, 2)\r\n\r\n    for(let i = 0; i < pointsWith2Cands.length; i++){\r\n        for(let j = i+1; j < pointsWith2Cands.length; j++){\r\n            const pointsInside = [pointsWith2Cands[i], pointsWith2Cands[j]]\r\n            const allCandidates = unique(pointsInside.flatMap(p => getBoardCell(board, p).candidates)) as number[]\r\n            if(allCandidates.length !== 2) continue\r\n\r\n            pairs.push({points: pointsInside, candidates: allCandidates})\r\n        }\r\n    }\r\n    return pairs\r\n}\r\n\r\n/**\r\n * TODO: This can be written better. No need to look for all those pairs\r\n *\r\n * pairs of numbers in a rectangle shape cannot only contain those pairs.\r\n * Otherwise the sudoku can't be unique.\r\n * Only applies if there's only two boxes in play.\r\n *\r\n * Type 1: 3 corners with two possible candidates. We can eliminate those candidates from the fourth corner\r\n * (any value that would \"resolve\" the uniqueness would either make the 3 corners have 0 candidates, or itself eliminate the 4 corner candidates like we would otherwise)\r\n * TODO: Type 2: 1 extra candidate in two cells that are not diagonals. This will then create a pointer, since the candidate must be in either of those cells.\r\n * TODO: Type 3: Same as type 2, but more candidates. Treat the cells of the rectangle as one virtual cell, and look for naked pair/triple/quad.\r\n * TODO: Type 4: Same as type 3, but this time check if one of the rectangle candidates are only in the rectangle cells in that box/column/row. If so, delete the other rectangle candidate.\r\n * TODO: Type 5: Same as type 2, but the extra candidate is on a diagonal. The candidate must be in one of these. See if there are cells that sees both of these, and eliminate the cand from those.\r\n * TODO: Type 6: See if one of the rectangle candidates form an x-wing. If so, it must be placed on two points diagonally. If this removes all other candidates from the rectangle, it is invalid, and so can be eliminated.\r\n * TODO: Hidden, avoidable 1/2, missing candidates. These seem a bit too exotic tbh.\r\n */\r\nexport const uniqueRectangle1 = (board: SolverBoard) => {\r\n    for(let points of getAllRows()){\r\n        const pairs = findNakedPairs(board, points)\r\n        for(let pair of pairs){\r\n            const colPairs = [\r\n                ...findNakedPairs(board, getColumn(pair.points[0].x)),\r\n                ...findNakedPairs(board, getColumn(pair.points[1].x))\r\n            ]\r\n\r\n            const matchingPairs = colPairs\r\n                .filter(colPair => unique([...colPair.candidates, ...pair.candidates]).length === 2) // Has the same two candidates\r\n                .filter(colPair => difference(pair.points, colPair.points, pointsEqual).length === 1) // Shares one point\r\n                .filter(colPair => unique([...colPair.points, ...pair.points].map(getBoxNumber)).length === 2) // In exactly two boxes\r\n\r\n            for(let colPair of matchingPairs){\r\n                const corners = uniqueBy([...colPair.points, ...pair.points], pointsEqual)\r\n                const x = Object.values<any>(groupBy(corners, p => p.x)).filter(xs => xs.length === 1).map(xs => xs[0])[0].x\r\n                const y = Object.values<any>(groupBy(corners, p => p.y)).filter(ys => ys.length === 1).map(ys => ys[0])[0].y\r\n                const missingCorner = {\r\n                    x, y, id: getPointId(x, y)\r\n                }\r\n                const candidates = pair.candidates\r\n                const effects = removeCandidatesFromPoints(board, [missingCorner], candidates)\r\n                const actors = corners.flatMap(point => candidates.map(cand => ({ point, cand })))\r\n\r\n                if(effects.length > 0){\r\n                    return {effects, actors}\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport const hiddenRectangle = (board: SolverBoard) => {\r\n    const unfilledPoints = getAllUnfilledPoints(board)\r\n    const biValuePoints = getPointsWithNCandidates(board, unfilledPoints, 2)\r\n\r\n    for(let startingCorner of biValuePoints) {\r\n        const cands = getBoardCell(board, startingCorner).candidates\r\n\r\n        const row = getPointsWithCandidates(board, getRow(startingCorner.y), cands).filter(p => !pointsEqual(p, startingCorner))\r\n        const col = getPointsWithCandidates(board, getColumn(startingCorner.x), cands).filter(p => !pointsEqual(p, startingCorner))\r\n\r\n        for(let rowCorner of row){\r\n            for(let colCorner of col){\r\n                const x = rowCorner.x\r\n                const y = colCorner.y\r\n                const oppositeCorner: Point = {x, y, id: getPointId(x, y)}\r\n                const oppositeCell = getBoardCell(board, oppositeCorner)\r\n                const hiddenRect = [startingCorner, rowCorner, colCorner, oppositeCorner]\r\n                const nBoxes = unique(hiddenRect.map(getBoxNumber)).length\r\n                if (nBoxes !== 2){\r\n                    continue\r\n                }\r\n\r\n                if (cands.every(cand => oppositeCell.candidates.includes(cand))) {\r\n                    for (let cand of cands) {\r\n                        const affected = getAffectedPoints(oppositeCorner)\r\n                        const everyPointWithCandIsInRect = getPointsWithCandidates(board, affected, [cand])\r\n                            .every(p => hiddenRect.some(hp => pointsEqual(p, hp)))\r\n                        if (everyPointWithCandIsInRect) {\r\n                            const effects: EliminationEffect[] = [{\r\n                                type: 'elimination',\r\n                                point: oppositeCorner,\r\n                                numbers: cands.filter(c => c !== cand)\r\n                            }]\r\n                            const actors = hiddenRect.flatMap(point => cands.map(cand => ({ point, cand })))\r\n                            return { effects, actors}\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}","import { SolverBoard, Point } from '../types'\r\nimport { allResults, difference, first, getCombinations, groupBy } from '../utils/misc'\r\nimport {\r\n    getAffectedPointsInCommon,\r\n    getAllUnfilledPoints, getColNumber,\r\n    getPointsWithCandidates, getRowNumber,\r\n    pointsEqual\r\n} from '../utils/sudokuUtils'\r\nimport { removeCandidateFromPoints } from '../utils/effects'\r\n\r\n/**\r\n * Basically an x-wing where one candidate is not aligned.\r\n * The line (row or col) where the points are aligned force the candidate to be placed in one of the other two points.\r\n * All other cells that sees these two candidates can be eliminated.\r\n */\r\nfunction *skyscraperGenerator(board: SolverBoard){\r\n    const getSkyscraperResult = (skyscraperPoints: Point[], getLineNumber, cand: number) => {\r\n        const pointsOnLine = Object.values<Point[]>(groupBy(skyscraperPoints, getLineNumber)).filter(points => points.length === 2)[0]\r\n        if(!pointsOnLine) return null\r\n\r\n        const pointsToCheck = difference(skyscraperPoints, pointsOnLine, pointsEqual)\r\n        const affectedInCommon = getAffectedPointsInCommon(pointsToCheck)\r\n        const pointsToRemove = difference(affectedInCommon, skyscraperPoints, pointsEqual)\r\n\r\n        const effects = removeCandidateFromPoints(board, pointsToRemove, cand)\r\n        const actors = skyscraperPoints.map(point => ({point, cand}))\r\n\r\n        if(effects.length > 0){\r\n            return {effects, actors}\r\n        }\r\n        return null\r\n    }\r\n\r\n    const allPoints = getAllUnfilledPoints(board)\r\n\r\n    for(let cand = 1; cand <= 9; cand++){\r\n        const pointsWithCand = getPointsWithCandidates(board, allPoints, [cand])\r\n\r\n        const rowsWithTwo = Object.values<Point[]>(groupBy(pointsWithCand, getRowNumber)).filter(points => points.length === 2)\r\n\r\n        for(let rows of getCombinations(rowsWithTwo, 2)){\r\n            const result = getSkyscraperResult(rows.flat(), getColNumber, cand)\r\n            if(result) yield result\r\n        }\r\n\r\n        const colsWithTwo = Object.values<Point[]>(groupBy(pointsWithCand, getColNumber)).filter(points => points.length === 2)\r\n\r\n        for(let cols of getCombinations(colsWithTwo, 2)){\r\n            const result = getSkyscraperResult(cols.flat(), getRowNumber, cand)\r\n            if(result) yield result\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport const skyscraper = (board: SolverBoard) => first(skyscraperGenerator(board))\r\nexport const allSkyscrapers = (board: SolverBoard) => allResults(skyscraperGenerator(board))","/**\r\n * Empty rectangles can be pretty simple:\r\n *\r\n * Pick one candidate\r\n * If you have a box with the candidate in only one row and one column, the cells not on that row and column is the \"empty rectangle\".\r\n * As usual, the weird naming in sudoku makes it harder to understand, so forget about the empty rectangle, and focus on the row and column instead.\r\n *\r\n * It comes down to this: If either the column or the row is eliminated, what remains is a pointer.\r\n * We can abuse this by looking for conjugate pairs (2 candidates in a house) where one cell of the pair sees the row or column in the box.\r\n * If the pair candidate is in this cell, we have a pointer\r\n * If the pair candidate is in the other cell, we can do basic eliminations\r\n * If the pointer and the basic elimination sees the same cell, the candidate can be removed from that cell\r\n *\r\n * NB: There is something called a dual rectangle where you can eliminate two points, but we can just run the algo twice and get the same result.\r\n */\r\nimport { SolverBoard, Point } from '../types'\r\nimport {\r\n    allCandidates,\r\n    getAllBoxes,\r\n    getBoxNumber, getColsOutsideBox, getColumn, getPointId,\r\n    getPointsWithCandidates,\r\n    getRowsOutsideBox,\r\n    pointsEqual\r\n} from '../utils/sudokuUtils'\r\nimport { removeCandidateFromPoints } from '../utils/effects'\r\nimport { allResults, difference, first, unique } from '../utils/misc'\r\n\r\nfunction *emptyRectangleGenerator(board: SolverBoard){\r\n    const getResult = (pairHouse: Point[], erPoints: Point[], pointerX, pointerY, cand) => {\r\n        const pair = getPointsWithCandidates(board, pairHouse, [cand])\r\n        if(pair.length !== 2) return null\r\n\r\n        let pointToRemove: Point\r\n        if(pair.some(point => point.x === pointerX)){\r\n            const otherPoint = pair.find(point => point.x !== pointerX)\r\n            if(!otherPoint) return null\r\n            pointToRemove = {x: otherPoint.x, y: pointerY, id: getPointId(otherPoint.x, pointerY)}\r\n        }else if(pair.some(point => point.y === pointerY)){\r\n            const otherPoint = pair.find(point => point.y !== pointerY)\r\n            if(!otherPoint) return null\r\n            pointToRemove = {x: pointerX, y: otherPoint.y, id: getPointId(pointerX, otherPoint.y)}\r\n        }else{\r\n            return null\r\n        }\r\n\r\n        // If both points are directly below/above (left/right) the box, it will try to eliminate a point inside the box, which is not valid\r\n        if(erPoints.some(p => pointsEqual(p, pointToRemove))) return null\r\n\r\n        const effects = removeCandidateFromPoints(board, [pointToRemove], cand)\r\n        const actors = [...erPoints, ...pair].map(point => ({point, cand}))\r\n        if(effects.length > 0){\r\n            return {effects, actors}\r\n        }\r\n        return null\r\n    }\r\n\r\n    for(let box of getAllBoxes()){\r\n        for(let cand of allCandidates){\r\n            const erPoints = getPointsWithCandidates(board, box, [cand])\r\n            const boxNumber = getBoxNumber(box[0])\r\n            const pairHouses = [...getRowsOutsideBox(boxNumber), ...getColsOutsideBox(boxNumber)]\r\n\r\n            if(erPoints.length === 2 && erPoints[0].x !== erPoints[1].x && erPoints[0].y !== erPoints[1].y){\r\n                // Only two points, diagonally. Still an ER, but with no clearly defined row and col. This means we have to try both.\r\n\r\n                for(let pairHouse of pairHouses){\r\n                    let result = getResult(pairHouse, erPoints, erPoints[0].x, erPoints[1].y, cand)\r\n                    if(result) yield result\r\n\r\n                    result = getResult(pairHouse, erPoints, erPoints[1].x, erPoints[0].y, cand)\r\n                    if(result) yield result\r\n                }\r\n            }else{\r\n                const colNumbers = unique(erPoints.map(p => p.x))\r\n                let pointerLines: any = null\r\n                for(let colNumber of colNumbers){\r\n                    const wholeColumn = getColumn(colNumber)\r\n                    const restPoints = difference(erPoints, wholeColumn, pointsEqual)\r\n                    if(restPoints.length > 0 && restPoints.every(p => p.y === restPoints[0].y)){\r\n                        pointerLines = {\r\n                            x: colNumber,\r\n                            y: restPoints[0].y\r\n                        }\r\n                    }\r\n                }\r\n                if(pointerLines !== null){\r\n                    for(let pairHouse of pairHouses){\r\n                        const result = getResult(pairHouse, erPoints, pointerLines.x, pointerLines.y, cand)\r\n                        if(result) yield result\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport const emptyRectangle = (board: SolverBoard) => first(emptyRectangleGenerator(board))\r\nexport const allEmptyRectangles = (board: SolverBoard) => allResults(emptyRectangleGenerator(board))","import { SolverBoard } from '../types'\r\nimport {\r\n    allCandidates,\r\n    getAffectedPoints, getAffectedPointsInCommon, getAllHousesMinusFilledPoints,\r\n    getAllUnfilledPoints,\r\n    getBoardCell, getPointsWithCandidates,\r\n    getPointsWithNCandidates, pointsWhere\r\n} from '../utils/sudokuUtils'\r\nimport { allResults, arraysEqual, difference, first } from '../utils/misc'\r\nimport { removeCandidateFromPoints } from '../utils/effects'\r\n\r\nfunction *xyWingGenerator(board: SolverBoard){\r\n    const biValuePoints = getPointsWithNCandidates(board, getAllUnfilledPoints(board), 2)\r\n\r\n    for(let pivot of biValuePoints){\r\n        const affectedBiValuesPoints = getPointsWithNCandidates(board, getAffectedPoints(pivot), 2)\r\n        const xy = getBoardCell(board, pivot).candidates\r\n        const [x, y] = xy\r\n        const zValues = difference(allCandidates, xy, (a, b) => a === b)\r\n        for(let z of zValues){\r\n            const pincer1 = getPointsWithCandidates(board, affectedBiValuesPoints, [z, x])[0]\r\n            if(!pincer1) continue\r\n\r\n            const pincer2 = getPointsWithCandidates(board, affectedBiValuesPoints, [z, y])[0]\r\n            if(!pincer2) continue\r\n\r\n            const pointsToRemove = getAffectedPointsInCommon([pincer1, pincer2])\r\n            const effects = removeCandidateFromPoints(board, pointsToRemove, z)\r\n            const actors = [{point: pivot}, {point: pincer1}, {point: pincer2}]\r\n\r\n            if(effects.length > 0){\r\n                yield {effects, actors}\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfunction *xyzWingGenerator(board: SolverBoard){\r\n    const triValuePoints = getPointsWithNCandidates(board, getAllUnfilledPoints(board), 3)\r\n\r\n    for(let pivot of triValuePoints){\r\n        const affectedBiValuesPoints = getPointsWithNCandidates(board, getAffectedPoints(pivot), 2)\r\n        const pivotCands = getBoardCell(board, pivot).candidates\r\n        for(let z of pivotCands){\r\n            const xy = difference(pivotCands, [z], (a, b) => a === b)\r\n            const [x, y] = xy\r\n\r\n            const pincer1 = getPointsWithCandidates(board, affectedBiValuesPoints, [z, x])[0]\r\n            if(!pincer1) continue\r\n\r\n            const pincer2 = getPointsWithCandidates(board, affectedBiValuesPoints, [z, y])[0]\r\n            if(!pincer2) continue\r\n\r\n            const pointsToRemove = getAffectedPointsInCommon([pivot, pincer1, pincer2])\r\n            const effects = removeCandidateFromPoints(board, pointsToRemove, z)\r\n            const actors = [{point: pivot}, {point: pincer1}, {point: pincer2}]\r\n\r\n            if(effects.length > 0){\r\n                yield {effects, actors}\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nconst candidatesEqual = (cands1, cands2) => arraysEqual(cands1, cands2, (a, b) => a === b)\r\n\r\nfunction *wWingGenerator(board: SolverBoard){\r\n    for(let x of allCandidates){\r\n        for(let house of getAllHousesMinusFilledPoints(board)){\r\n            const pointsWithX = getPointsWithCandidates(board, house, [x])\r\n            if(pointsWithX.length === 2){\r\n                const affected1 = getAffectedPoints(pointsWithX[0])\r\n                const affected2 = getAffectedPoints(pointsWithX[1])\r\n                for(let w of allCandidates){\r\n                    const wx = [w, x]\r\n                    const wxPoints1 = pointsWhere(board, affected1, cell => candidatesEqual(cell.candidates, wx))\r\n                    const wxPoints2 = pointsWhere(board, affected2, cell => candidatesEqual(cell.candidates, wx))\r\n                    for(let i = 0; i < wxPoints1.length; i++){\r\n                        for(let j = 0; j < wxPoints2.length; j++){\r\n                            const common = getAffectedPointsInCommon([wxPoints1[i], wxPoints2[j]])\r\n                            const effects = removeCandidateFromPoints(board, common, w)\r\n                            const actors = [\r\n                                ...pointsWithX.map(point => ({ point, cand: x })),\r\n                                ...wx.map(cand => ({ point: wxPoints1[i], cand })),\r\n                                ...wx.map(cand => ({ point: wxPoints2[j], cand }))\r\n                            ]\r\n                            if(effects.length > 0){\r\n                                yield {effects, actors}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport const xyWing = (board: SolverBoard) => first(xyWingGenerator(board))\r\nexport const allXyWings = (board: SolverBoard) => allResults(xyWingGenerator(board))\r\n\r\nexport const xyzWing = (board: SolverBoard) => first(xyzWingGenerator(board))\r\nexport const allXyzWings = (board: SolverBoard) => allResults(xyzWingGenerator(board))\r\n\r\nexport const wWing = (board: SolverBoard) => first(wWingGenerator(board))\r\nexport const allWWings = (board: SolverBoard) => allResults(wWingGenerator(board))","import { SetValueEffect, SolverBoard } from '../types'\r\nimport { canPutDigit, cloneBoard, getAllUnfilledPoints, getBoardCell, getPointId } from '../utils/sudokuUtils'\r\nimport { allResults, first } from '../utils/misc'\r\n\r\nfunction *generateBruteForceDigits(board: SolverBoard){\r\n    const clonedBoard = cloneBoard(board)\r\n    solve(clonedBoard)\r\n    const unfilledPoints = getAllUnfilledPoints(board)\r\n    for(let point of unfilledPoints){\r\n        yield {\r\n            effects: [{type: 'value', point, number: getBoardCell(clonedBoard, point).value} as SetValueEffect],\r\n            actors: [{point}]\r\n        }\r\n    }\r\n}\r\n\r\nconst solve = (board: SolverBoard, x = 0, y = 0) => {\r\n    if(x === 9){\r\n        x = 0\r\n        y++\r\n        if(y === 9){\r\n            return board // Got to the end of the board, solution found\r\n        }\r\n    }\r\n    if(board[y][x].value !== null){\r\n        return solve(board, x+1, y)\r\n    }\r\n\r\n    for(let n = 1; n <= 9; n++){\r\n        if(canPutDigit(board, {x, y, id: getPointId(x, y)}, n)){\r\n            board[y][x].value = n\r\n            const solution = solve(board, x+1,y)\r\n            if(solution){\r\n                return solution\r\n            }\r\n        }\r\n    }\r\n\r\n    board[y][x].value = null\r\n    return null\r\n}\r\n\r\nexport const bruteForce = (board: SolverBoard) => first(generateBruteForceDigits(board))\r\nexport const allBruteForceDigits = (board: SolverBoard) => allResults(generateBruteForceDigits(board))","import {\r\n    EliminationEffect, GroupEliminationEffect,\r\n    GroupSetValueEffect,\r\n    Point,\r\n    SetValueEffect,\r\n    SolverBoard\r\n} from '../types'\r\nimport {\r\n    allCandidates,\r\n    cloneBoard,\r\n    getAllHousesMinusFilledPoints,\r\n    getBoardCell,\r\n    getBox,\r\n    getBoxGroups,\r\n    getBoxNumber,\r\n    getColNumber,\r\n    getColumn,\r\n    getPointsWithCandidates,\r\n    getRow,\r\n    getRowNumber, pointsEqual\r\n} from '../utils/sudokuUtils'\r\nimport {\r\n    effectsEqual,\r\n    removeCandidateFromAffectedPoints,\r\n    removeCandidatesFromPoints,\r\n    uniqueEffects\r\n} from '../utils/effects'\r\nimport { difference, intersection, unique, uniqueBy } from '../utils/misc'\r\n\r\nexport const getPointKey = (point: Point) => point.id\r\nexport const getGroupId = (group: Point[]) => group.map(p => p.id).join('-')\r\n\r\nexport type SingleNode = {\r\n    type: 'single'\r\n    point: Point\r\n    cand: number\r\n}\r\nexport type GroupNode = {\r\n    type: 'group'\r\n    points: Point[]\r\n    groupId: string\r\n    cand: number\r\n}\r\nexport type LinkNode = SingleNode | GroupNode\r\n\r\nexport type Link<P extends LinkNode = LinkNode, N extends LinkNode = LinkNode> = {\r\n    type: 'weak' | 'strong'\r\n    prev: P\r\n    next: N\r\n}\r\nexport type SingleLink = Link<SingleNode, SingleNode>\r\n\r\nexport type Table<T extends Link = Link> = {\r\n    [key: string]: {\r\n        points: Point[]\r\n        links: T[]\r\n    }\r\n}\r\n\r\nexport type SingleTable = Table<SingleLink>\r\n\r\nconst getLinks = (\r\n    node: SingleNode | GroupNode,\r\n    effectsIfTrue: EliminationEffect[],\r\n    effectsIfFalse: SetValueEffect[],\r\n    groupEffectsIfTrue: GroupEliminationEffect[],\r\n    groupEffectsIfFalse: GroupSetValueEffect[]\r\n): Link[] => {\r\n    const prev = node\r\n    return [\r\n        ...effectsIfFalse.map((eff) => ({\r\n            type: 'strong' as const,\r\n            prev,\r\n            next: {\r\n                type: 'single' as const,\r\n                point: eff.point,\r\n                cand: eff.number\r\n            }\r\n        })),\r\n        ...effectsIfTrue.flatMap((eff) => eff.numbers.map(cand => ({\r\n            type: 'weak' as const,\r\n            prev,\r\n            next: {\r\n                type: 'single' as const,\r\n                point: eff.point,\r\n                cand\r\n            }\r\n        }))),\r\n        ...groupEffectsIfFalse.map((eff) => ({\r\n            type: 'strong' as const,\r\n            prev,\r\n            next: {\r\n                type: 'group' as const,\r\n                points: eff.group,\r\n                groupId: eff.groupId,\r\n                cand: eff.number\r\n            }\r\n        })),\r\n        ...groupEffectsIfTrue.map((eff) => ({\r\n            type: 'weak' as const,\r\n            prev,\r\n            next: {\r\n                type: 'group' as const,\r\n                points: eff.group,\r\n                groupId: eff.groupId,\r\n                cand: eff.number\r\n            }\r\n        }))\r\n    ]\r\n}\r\n\r\nconst getNakedSingle = (board: SolverBoard, point: Point): SetValueEffect[] => {\r\n    const cell = getBoardCell(board, point)\r\n    if(cell.candidates.length === 1) {\r\n        return [{type: 'value', point, number: cell.candidates[0]}]\r\n    }\r\n    return []\r\n}\r\nconst getHiddenSingles = (board: SolverBoard): SetValueEffect[] => {\r\n    const effects: SetValueEffect[] = []\r\n    for(let house of getAllHousesMinusFilledPoints(board)){\r\n        for(let cand = 1; cand <= 9; cand++){\r\n            const pointsWithCand = house.filter(p => getBoardCell(board, p).candidates.some(c => c === cand))\r\n            if(pointsWithCand.length === 1){\r\n                const point = pointsWithCand[0]\r\n                effects.push({type: 'value', point, number: cand} as const)\r\n            }\r\n        }\r\n    }\r\n    return effects\r\n}\r\n\r\nconst getSingleFalseSingleEffects = (board: SolverBoard, point: Point, cand: number): SetValueEffect[] => {\r\n    const cell = getBoardCell(board, point)\r\n    const cands = [...cell.candidates]\r\n    cell.candidates = cell.candidates.filter(c => c !== cand)\r\n    const effects = uniqueEffects([\r\n        ...getNakedSingle(board, point),\r\n        ...getHiddenSingles(board)\r\n    ])\r\n    cell.candidates = cands\r\n    return effects\r\n}\r\nconst getSingleFalseGroupEffects = (board: SolverBoard, point: Point, cand: number): GroupSetValueEffect[] => {\r\n    return getGroupFalseGroupEffects(board, [point], cand)\r\n}\r\n\r\nconst getSingleTrueSingleEffects = (board: SolverBoard, point: Point, cand: number): EliminationEffect[] => {\r\n    const cell = getBoardCell(board, point)\r\n    return [\r\n        ...removeCandidatesFromPoints(board, [point], cell.candidates.filter(c => c !== cand)),\r\n        ...removeCandidateFromAffectedPoints(board, point, cand) as EliminationEffect[]\r\n    ]\r\n}\r\nconst getSingleTrueGroupEffects = (board: SolverBoard, allGroups: Point[][], point: Point, singleTrueSingleEffects: EliminationEffect[]): GroupEliminationEffect[] => {\r\n    return getGroupTrueGroupEffects(board, allGroups, [point], singleTrueSingleEffects)\r\n}\r\n\r\n// If group is false, what single point effects are there?\r\nconst getGroupFalseSingleEffects = (board: SolverBoard, points: Point[], cand: number): SetValueEffect[] => {\r\n    board = cloneBoard(board)\r\n    for(let point of points){\r\n        const cell = getBoardCell(board, point)\r\n        cell.candidates = cell.candidates.filter(c => c !== cand)\r\n    }\r\n    return uniqueEffects([\r\n        ...points.flatMap(point => getNakedSingle(board, point)),\r\n        ...getHiddenSingles(board)\r\n    ])\r\n}\r\n\r\n// If group is false, which group effects are there?\r\nconst getGroupFalseGroupEffects = (board: SolverBoard, falseGroup: Point[], cand: number): GroupSetValueEffect[] => {\r\n    const isColumn = unique(falseGroup.map(getColNumber)).length === 1\r\n    const isRow = unique(falseGroup.map(getRowNumber)).length === 1\r\n\r\n    const housesToCheck = [\r\n        getBox(falseGroup[0])\r\n    ]\r\n    // We allow single points as input \"groups\" to this function, so check both row/col\r\n    if (isColumn) {\r\n        housesToCheck.push(getColumn(falseGroup[0].x))\r\n    }\r\n    if (isRow) {\r\n        housesToCheck.push(getRow(falseGroup[0].y))\r\n    }\r\n\r\n    const effects: GroupSetValueEffect[] = []\r\n    for(let house of housesToCheck){\r\n        const trueGroup = difference(getPointsWithCandidates(board, house, [cand]), falseGroup, pointsEqual)\r\n        if (trueGroup.length >= 2) {\r\n            const sameBox = unique(trueGroup.map(getBoxNumber)).length === 1\r\n            const sameCol = unique(trueGroup.map(getColNumber)).length === 1\r\n            const sameRow = unique(trueGroup.map(getRowNumber)).length === 1\r\n\r\n            if(sameBox && (sameCol || sameRow)){\r\n                effects.push({\r\n                    type: 'group-value' as const,\r\n                    group: trueGroup,\r\n                    groupId: getGroupId(trueGroup),\r\n                    number: cand\r\n                })\r\n            }\r\n        }\r\n    }\r\n    return effects\r\n}\r\n\r\n// If group is true, i.e. one of the points is true, what single point effects are there?\r\nconst getGroupTrueSingleEffects = (board: SolverBoard, points: Point[], cand: number): EliminationEffect[] => {\r\n    return intersection(points.map(point => getSingleTrueSingleEffects(board, point, cand)), effectsEqual)\r\n}\r\n\r\n// If group is true, what group effects are there?\r\nconst getGroupTrueGroupEffects = (board: SolverBoard, allGroups: Point[][], trueGroup: Point[], groupTrueSingleEffects: EliminationEffect[]): GroupEliminationEffect[] => {\r\n    const groupEffects: GroupEliminationEffect[] = []\r\n    for(let group of allGroups){\r\n        for(let cand of allCandidates){\r\n            const falseGroup = difference(getPointsWithCandidates(board, group, [cand]), trueGroup, pointsEqual)\r\n            if(falseGroup.length >= 2){\r\n                const eliminatesWholeGroup = falseGroup.every(p => groupTrueSingleEffects.some(eff => p.id === eff.point.id && eff.numbers.includes(cand)))\r\n                if(eliminatesWholeGroup){\r\n                    groupEffects.push({\r\n                        type: 'group-elimination',\r\n                        group: falseGroup,\r\n                        groupId: getGroupId(falseGroup),\r\n                        number: cand\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return groupEffects\r\n}\r\n\r\n/**\r\n * The table concept I glanced from hodoku. Called trebors tables or something like that.\r\n * The idea is to record what effects occur when a candidate is either set or not set. Only direct effects are considered.\r\n * Direct in this case is hidden/naked singles and just basic eliminations.\r\n * When a candidate is set, we can use it to make weak links towards all its effected cells. Effects are basic eliminations.\r\n * When a candidate is not set, we can use it to make strong links towards all its effected cells. Effects are naked/hidden singles here.\r\n */\r\nexport const createTable = (board: SolverBoard, points: Point[], cands: number[], withGroups: boolean = false) => {\r\n    // Ensure the cells with the fewest candidates are stored first.\r\n    // These are the most likely starting cells that a human would choose.\r\n    points = points.sort((a, b) => {\r\n        return getBoardCell(board, a).candidates.length - getBoardCell(board, b).candidates.length\r\n    })\r\n\r\n    let groupsTable: Table = {}\r\n    if (withGroups) {\r\n        groupsTable = createGroupTable(board)\r\n    }\r\n    const allGroups = uniqueBy(Object.values(groupsTable).map(x => x.points), (a, b) => getGroupId(a) === getGroupId(b))\r\n\r\n    const table: Table = {}\r\n    for(let point of points){\r\n        for(let cand of cands){\r\n            const cell = getBoardCell(board, point)\r\n            if(!cell.candidates.includes(cand)){\r\n                continue\r\n            }\r\n\r\n            const effectsIfTrue = getSingleTrueSingleEffects(board, point, cand).filter(eff => points.some(p => pointsEqual(p, eff.point)))\r\n            const effectsIfFalse = getSingleFalseSingleEffects(board, point, cand).filter(eff => points.some(p => pointsEqual(p, eff.point)))\r\n\r\n            let groupEffectsIfTrue: GroupEliminationEffect[] = []\r\n            let groupEffectsIfFalse: GroupSetValueEffect[] = []\r\n            if(withGroups){\r\n                groupEffectsIfTrue = getSingleTrueGroupEffects(board, allGroups, point, effectsIfTrue)\r\n                groupEffectsIfFalse = getSingleFalseGroupEffects(board, point, cand)\r\n            }\r\n\r\n            if(effectsIfTrue.length > 0 || effectsIfFalse.length > 0){\r\n                const node: SingleNode = { type: 'single', point, cand }\r\n                const link = getLinks(node, effectsIfTrue, effectsIfFalse, groupEffectsIfTrue, groupEffectsIfFalse)\r\n                table[getPointKey(point)] = table[getPointKey(point)] ?? { points: [point], links: [] }\r\n                table[getPointKey(point)].links.push(...link)\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        ...table,\r\n        ...groupsTable\r\n    }\r\n}\r\n\r\nexport const createGroupTable = (board: SolverBoard) => {\r\n    board = cloneBoard(board)\r\n    const table: Table = {}\r\n\r\n    const groups = getBoxGroups()\r\n        .flatMap(group => {\r\n            return [\r\n                group,\r\n                [group[0], group[1]],\r\n                [group[0], group[2]],\r\n                [group[1], group[2]]\r\n            ]\r\n        })\r\n    for(let group of groups){\r\n        for(let cand of allCandidates){\r\n            const points = getPointsWithCandidates(board, group, [cand])\r\n            if(points.length >= 2){\r\n                const groupId = getGroupId(points)\r\n                const effectsIfTrue = getGroupTrueSingleEffects(board, points, cand)\r\n                const effectsIfFalse = getGroupFalseSingleEffects(board, points, cand)\r\n                const groupEffectsIfTrue = getGroupTrueGroupEffects(board, groups, points, effectsIfTrue)\r\n                const groupEffectsIfFalse = getGroupFalseGroupEffects(board, points, cand)\r\n                const hasEffects = effectsIfTrue.length > 0 || effectsIfFalse.length > 0 || groupEffectsIfTrue.length > 0 || groupEffectsIfFalse.length > 0\r\n\r\n                if(hasEffects){\r\n                    const node: GroupNode = { type: 'group', groupId, points, cand }\r\n                    const links = getLinks(node, effectsIfTrue, effectsIfFalse, groupEffectsIfTrue, groupEffectsIfFalse)\r\n                    table[groupId] = table[groupId] ?? { points, links: [] }\r\n                    table[groupId].links.push(...links)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return table\r\n}\r\n\r\nexport const getAllLinks = (table: Table, node: LinkNode) => {\r\n    const item = table[node.type === 'single' ? getPointKey(node.point) : node.groupId]\r\n    return item ? item.links : []\r\n}","import {\r\n    Actor,\r\n    Effect,\r\n    Point,\r\n    SolverBoard,\r\n    TechniqueResult,\r\n} from '../types'\r\nimport {\r\n    removeCandidateFromPoints,\r\n    removeCandidatesFromPoints\r\n} from '../utils/effects'\r\nimport { arraysEqual, difference, unique } from '../utils/misc'\r\nimport {\r\n    allCandidates,\r\n    candidatesExcept,\r\n    getAffectedPointsInCommon,\r\n    getAllPoints,\r\n    getAllUnfilledPoints,\r\n    getBoardCell,\r\n    getBox,\r\n    getBoxNumber,\r\n    getColNumber,\r\n    getColumn,\r\n    getPointsWithNCandidates,\r\n    getRow,\r\n    getRowNumber,\r\n    pointsEqual,\r\n    pointsSeeEachOther,\r\n} from '../utils/sudokuUtils'\r\nimport {\r\n    createTable,\r\n    getAllLinks,\r\n    Link,\r\n    LinkNode,\r\n    SingleLink, SingleNode,\r\n    Table\r\n} from './chainGraph'\r\n\r\nconst getNodePoints = (node: LinkNode) => node.type === 'single' ? [node.point] : node.points\r\n\r\nconst linkIsInternalWithinPoint = (link: Link) => {\r\n    if (link.prev.type === 'single' && link.next.type === 'single') {\r\n        return link.prev.point.id === link.next.point.id\r\n    }\r\n    return false\r\n}\r\n\r\ntype QueueItem = {\r\n    seen: Set<number | string>\r\n    chain: Link[]\r\n}\r\n\r\nconst getSeenKeys = (node: LinkNode) => node.type === 'single' ? [node.point.id] : node.points.map(p => p.id)\r\n\r\nconst iterateChainsInTable = (table: Table, keepLink, check, maxDepth: number = 13) => {\r\n    const isValidNextLink = (chain: Link[], seen: Set<string | number>, link: Link) => {\r\n        const first = chain[0] as Link<SingleNode>\r\n        const last = chain[chain.length - 1]\r\n\r\n        if(link.prev.cand !== last.next.cand) return false\r\n\r\n        const requiredLinkType = last.type === 'strong' ? 'weak' : 'strong'\r\n        if(link.type !== requiredLinkType) return false\r\n\r\n        if(!keepLink(link)) return false\r\n\r\n        const lastWasInternal = linkIsInternalWithinPoint(last)\r\n        const nextIsInternal = linkIsInternalWithinPoint(link)\r\n\r\n        if(lastWasInternal && nextIsInternal) return false // Prevent eternal loop\r\n\r\n        const isLoop = link.next.type !== 'group' && first.prev.point.id === link.next.point.id\r\n\r\n        // Can't be lasso if loop or internal link\r\n        if(isLoop) return true\r\n        if(nextIsInternal) return true\r\n\r\n        // NB: We don't check for internal links between groups or single<->group\r\n        // That means that we'll not all those as lassos, and won't use the link\r\n\r\n        const isLasso = getSeenKeys(link.next).some(key => seen.has(key))\r\n        return !isLasso\r\n    }\r\n\r\n    let queue: QueueItem[] = Object.values(table)\r\n        .flatMap(x => x.links\r\n            .filter(link => keepLink(link) && link.prev.type === 'single')\r\n            .map(link => ({ chain: [link], seen: new Set(getSeenKeys(link.prev)) }))\r\n        )\r\n\r\n    let i = 0\r\n    while(i < queue.length){\r\n        const queueItem = queue[i++] // Don't shift the queue. Turns out to be super slow when it becomes large.\r\n        const { chain } = queueItem\r\n        const firstLink = chain[0] as Link<SingleNode>\r\n        const lastLink = chain[chain.length - 1]\r\n\r\n        let isLoop = false\r\n        if(lastLink.next.type !== 'group' && chain.length > 1){\r\n            isLoop = firstLink.prev.point.id === lastLink.next.point.id\r\n            if(check(chain, isLoop)){\r\n                return true\r\n            }\r\n        }\r\n        if(isLoop){\r\n            continue\r\n        }\r\n\r\n        if(queueItem.chain.length >= maxDepth){\r\n            continue\r\n        }\r\n\r\n        const seen = new Set([...queueItem.seen, ...getSeenKeys(lastLink.next)])\r\n        const nextLinks = getAllLinks(table, lastLink.next).filter(link => isValidNextLink(chain, seen, link))\r\n        for(let nextLink of nextLinks){\r\n            queue.push({ chain: [...chain, nextLink], seen })\r\n        }\r\n\r\n        // Clear some memory every once in a while\r\n        if(queue.length > 1000000){\r\n            queue = queue.slice(i)\r\n            i = 0\r\n        }\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nconst chainToActors = (chain: Link[]): Actor[] => {\r\n    const first = chain[0].prev.type === 'single'\r\n        ? [{\r\n            point: chain[0].prev.point,\r\n            cand: chain[0].prev.cand,\r\n            chainSet: chain[0].type === 'strong' ? 'no' as const : 'yes' as const\r\n        }]\r\n        : chain[0].prev.points.map(point => ({\r\n            point: point,\r\n            cand: chain[0].prev.cand,\r\n            chainSet: chain[0].type === 'strong' ? 'no' as const : 'yes' as const\r\n        }))\r\n\r\n    return [\r\n        ...first,\r\n        ...chain.flatMap(link => {\r\n            if(link.next.type === 'single'){\r\n                return [{\r\n                    point: link.next.point,\r\n                    cand: link.next.cand,\r\n                    chainSet: link.type === 'strong' ? 'yes' as const : 'no' as const\r\n                }]\r\n            }\r\n            return link.next.points.map(point => ({\r\n                point: point,\r\n                cand: link.next.cand,\r\n                chainSet: link.type === 'strong' ? 'yes' as const : 'no' as const\r\n            }))\r\n        }),\r\n    ]\r\n}\r\n\r\nconst chainIsAlternatingInternal = (chain: Link[]) => {\r\n    for(let i = 0; i < chain.length; i += 2){\r\n        if(!linkIsInternalWithinPoint(chain[i])) return false\r\n    }\r\n    return true\r\n}\r\n\r\n/**\r\n * Remote pairs are a chain of cells with the same two candidates, like a pair but at least 4 cells,\r\n * each affecting the next. E.g.\r\n * 45 45 45 45\r\n * Can be either\r\n *\r\n * 4  5  4  5\r\n * 5  4  5  4\r\n *\r\n * So if any cells in the chain length 3+2n apart has cells they see in common, we can eliminate the pair candidates from the cells in common.\r\n * Just like a normal naked pair actually, but with more steps.\r\n *\r\n * This implementation is basically the same as for xy chains, but with the restriction that all cells in\r\n * the chain must have the same candidates. This ensures that the result is actually a remote pair instead of an xy chain.\r\n * See comments below for more details.\r\n */\r\nexport function remotePairChain(board: SolverBoard){\r\n    const biValuePoints = getPointsWithNCandidates(board, getAllPoints(), 2)\r\n    const table = createTable(board, biValuePoints, allCandidates, false)\r\n\r\n    let result: any = null\r\n    const keepLink = (link: SingleLink) => {\r\n        // Every link is between pairs\r\n        return arraysEqual(\r\n            getBoardCell(board, link.prev.point).candidates,\r\n            getBoardCell(board, link.next.point).candidates,\r\n            (a, b) => a === b\r\n        )\r\n    }\r\n    const maxDepth = 12\r\n    iterateChainsInTable(table, keepLink, (chain: SingleLink[], isLoop) => {\r\n        if(isLoop) return false\r\n        if(chain.length <= 2) return false\r\n        const firstLink = chain[0]\r\n        const lastLink = chain[chain.length - 1]\r\n        // Starts and ends with strong link. Read this as:\r\n        // If we DON'T start with the candidate in the first cell of the chain\r\n        // then the last cell will definitely contain the candidate\r\n        // So the candidate is in either the first or the last cell\r\n        if(!(firstLink.type === 'strong' && lastLink.type === 'strong')){\r\n            return false\r\n        }\r\n        // Make sure that the ending candidate is actually the same as the starting candidate\r\n        if(firstLink.prev.cand !== lastLink.next.cand){\r\n            return false\r\n        }\r\n        // Only want those chains that take into account the links between pairs\r\n        if(!chainIsAlternatingInternal(chain)){\r\n            return false\r\n        }\r\n        const start = firstLink.prev.point\r\n        const end = lastLink.next.point\r\n        // Yes, we can eliminate both candidates.\r\n        // Why? Because we already check that all cells in the chain have the same two candidates.\r\n        // We can then start with the other candidate and arrive at the exact same conclusion.\r\n        const cands = getBoardCell(board, start).candidates\r\n        const affected = getAffectedPointsInCommon([start, end])\r\n        const effects = removeCandidatesFromPoints(board, affected, cands)\r\n\r\n        if(effects.length > 0){\r\n            result = {effects, actors: chainToActors(chain)}\r\n            return true\r\n        }\r\n    }, maxDepth)\r\n\r\n    return result\r\n}\r\n\r\n/**\r\n * x chains consider only one candidate in a chain.\r\n * It should start and end with a strong link.\r\n * An initial strong link means we start by NOT choosing the candidate, then follow the chain.\r\n * An ending strong link means that the final value will definitely be the candidate given the initial strong link.\r\n */\r\nexport function xChain(board: SolverBoard){\r\n    const unfilledPoints = getAllUnfilledPoints(board)\r\n    const table = createTable(board, unfilledPoints, allCandidates, false)\r\n\r\n    const maxDepth = 10\r\n    let result: any = null\r\n    const keepLink = (link: SingleLink) => link.prev.cand === link.next.cand\r\n    iterateChainsInTable(table, keepLink, (chain: SingleLink[], isLoop) => {\r\n        if(isLoop) return false\r\n        if(chain.length <= 2) return false\r\n        const firstLink = chain[0]\r\n        const lastLink = chain[chain.length - 1]\r\n        if(!(firstLink.type === 'strong' && lastLink.type === 'strong')){\r\n            return false\r\n        }\r\n        const start = firstLink.prev.point\r\n        const end = lastLink.next.point\r\n        const cand = firstLink.prev.cand\r\n        const affected = getAffectedPointsInCommon([start, end])\r\n        const effects = removeCandidatesFromPoints(board, affected, [cand])\r\n\r\n        if(effects.length > 0){\r\n            result = {effects, actors: chainToActors(chain)}\r\n            return true\r\n        }\r\n    }, maxDepth)\r\n\r\n    return result\r\n}\r\n\r\n\r\n/**\r\n * xy chains consider only bi value points\r\n * Like x chains and remote pairs, they must start and end with strong links\r\n * Also, the initial and final links must be on the same candidate.\r\n * This ensures that the candidate is in one of those cells.\r\n */\r\nexport function xyChain(board: SolverBoard){\r\n    const biValuePoints = getPointsWithNCandidates(board, getAllPoints(), 2)\r\n    const table = createTable(board, biValuePoints, allCandidates, false)\r\n\r\n    const maxDepth = 12\r\n    let result: any = null\r\n    const keepLink = () => true\r\n    iterateChainsInTable(table, keepLink, (chain: Link[], isLoop) => {\r\n        if(isLoop) return false\r\n        if(chain.length <= 2) return false\r\n        if(!chainIsAlternatingInternal(chain)) return false\r\n        const firstLink = chain[0] as SingleLink\r\n        const lastLink = chain[chain.length - 1] as SingleLink\r\n        // NOTE: We might restrict each strong link to be within cells as well.\r\n        // Right now we allow strong links to go directly to other cells.\r\n        // Not sure if this is still considered an xy chain. I guess it still is, but with fewer steps.\r\n        if(!(firstLink.type === 'strong' && lastLink.type === 'strong')){\r\n            return false\r\n        }\r\n        if(firstLink.prev.cand !== lastLink.next.cand){\r\n            return false\r\n        }\r\n        const start = firstLink.prev.point\r\n        const end = lastLink.next.point\r\n        const cand = firstLink.prev.cand\r\n        const affected = getAffectedPointsInCommon([start, end])\r\n        const effects = removeCandidatesFromPoints(board, affected, [cand])\r\n\r\n        if(effects.length > 0){\r\n            result = {effects, actors: chainToActors(chain)}\r\n            return true\r\n        }\r\n    }, maxDepth)\r\n\r\n    return result\r\n}\r\n\r\nconst getDiscontinuousNiceLoop = (board: SolverBoard, chain: Link[], isLoop: boolean) => {\r\n    if(!isLoop){\r\n        return null\r\n    }\r\n\r\n    const firstLink = chain[0] as SingleLink\r\n    const lastLink = chain[chain.length - 1] as SingleLink\r\n\r\n    // first OFF and last ON and same cand -> contradiction. It must be the candidate\r\n    if(firstLink.type === 'strong' && lastLink.type === 'strong' && firstLink.prev.cand === lastLink.next.cand){\r\n        const effects = removeCandidatesFromPoints(board, [firstLink.prev.point], candidatesExcept([firstLink.prev.cand]))\r\n        if(effects.length > 0){\r\n            return {effects, actors: chainToActors(chain)}\r\n        }\r\n    }\r\n    // first ON and last OFF and same cand -> contradiction. It can't be the candidate\r\n    if(firstLink.type === 'weak' && lastLink.type === 'weak' && firstLink.prev.cand === lastLink.next.cand){\r\n        const effects = removeCandidatesFromPoints(board, [firstLink.prev.point], [firstLink.prev.cand])\r\n        if(effects.length > 0){\r\n            return {effects, actors: chainToActors(chain)}\r\n        }\r\n    }\r\n\r\n    // first ON and last ON and not same cand -> contradiction. It can't be the candidate\r\n    if(firstLink.type === 'weak' && lastLink.type === 'strong' && firstLink.prev.cand !== lastLink.next.cand){\r\n        const effects = removeCandidatesFromPoints(board, [firstLink.prev.point], [firstLink.prev.cand])\r\n        if(effects.length > 0){\r\n            return {effects, actors: chainToActors(chain)}\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nconst getContinuousNiceLoop = (board: SolverBoard, chain: Link[], isLoop: boolean) => {\r\n    if(!isLoop){\r\n        return null\r\n    }\r\n\r\n    const firstLink = chain[0] as SingleLink\r\n    const lastLink = chain[chain.length - 1] as SingleLink\r\n\r\n    if(\r\n        (\r\n            (firstLink.type === 'weak' && lastLink.type === 'strong') ||\r\n            (firstLink.type === 'strong' && lastLink.type === 'weak')\r\n        ) &&\r\n        firstLink.prev.cand === lastLink.next.cand\r\n    ){\r\n        const pointsInChain = chain.flatMap(link => getNodePoints(link.next)) // It's a loop, so the first point is included\r\n        const weakSingleLinks = chain.filter(link => link.type === 'weak')\r\n\r\n        const effects: Effect[] = []\r\n\r\n        for(let link of weakSingleLinks){\r\n            // TODO: What about internal links with grouping? Think it doesn't matter..\r\n            if(linkIsInternalWithinPoint(link) && link.prev.type === 'single' && link.next.type === 'single'){\r\n                effects.push(\r\n                    ...removeCandidatesFromPoints(board, [link.prev.point], candidatesExcept([link.prev.cand, link.next.cand]))\r\n                )\r\n            }else{\r\n                let pointsToRemove: Point[] = []\r\n                const prevPoints = getNodePoints(link.prev)\r\n                const nextPoints = getNodePoints(link.next)\r\n\r\n                // link within box\r\n                const prevBoxes = unique(prevPoints.map(getBoxNumber))\r\n                const nextBoxes = unique(nextPoints.map(getBoxNumber))\r\n                if(prevBoxes.length === 1 && nextBoxes.length === 1 && prevBoxes[0] === nextBoxes[0]){\r\n                    pointsToRemove.push(...getBox(prevPoints[0]))\r\n                }\r\n\r\n                // link within column\r\n                const prevCols = unique(prevPoints.map(getColNumber))\r\n                const nextCols = unique(nextPoints.map(getColNumber))\r\n                if(prevCols.length === 1 && nextCols.length === 1 && prevCols[0] === nextCols[0]){\r\n                    pointsToRemove.push(...getColumn(prevPoints[0].x))\r\n                }\r\n\r\n                // link within row\r\n                const prevRows = prevPoints.map(getRowNumber)\r\n                const nextRows = nextPoints.map(getRowNumber)\r\n                if(prevRows.length === 1 && nextRows.length === 1 && prevRows[0] === nextRows[0]){\r\n                    pointsToRemove.push(...getRow(prevPoints[0].y))\r\n                }\r\n                pointsToRemove = difference(pointsToRemove, pointsInChain, pointsEqual)\r\n                const cand = link.next.cand\r\n                effects.push(\r\n                    ...removeCandidatesFromPoints(board, pointsToRemove, [cand])\r\n                )\r\n            }\r\n        }\r\n        if(effects.length > 0){\r\n            return {effects, actors: chainToActors(chain)}\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nconst getAicType1 = (board: SolverBoard, chain: Link[], isLoop: boolean) => {\r\n    if(isLoop){\r\n        return null\r\n    }\r\n\r\n    const firstLink = chain[0] as SingleLink\r\n    const lastLink = chain[chain.length - 1] as SingleLink\r\n\r\n    if(firstLink.type === 'strong' && lastLink.type === 'strong' && firstLink.prev.cand === lastLink.next.cand){\r\n        const cand = firstLink.prev.cand\r\n        const affected = getAffectedPointsInCommon([firstLink.prev.point, lastLink.next.point])\r\n        const effects = removeCandidatesFromPoints(board, affected, [cand])\r\n\r\n        if(effects.length > 0){\r\n            return {effects, actors: chainToActors(chain)}\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nconst getAicType2 = (board: SolverBoard, chain: Link[], isLoop: boolean) => {\r\n    if(isLoop){\r\n        return null\r\n    }\r\n\r\n    const firstLink = chain[0] as SingleLink\r\n    const lastLink = chain[chain.length - 1] as SingleLink\r\n\r\n    if(firstLink.type === 'strong' && lastLink.type === 'strong' && firstLink.prev.cand !== lastLink.next.cand){\r\n        if(pointsSeeEachOther(firstLink.prev.point, lastLink.next.point)){\r\n            const effects = [\r\n                ...removeCandidateFromPoints(board, [firstLink.prev.point], lastLink.next.cand),\r\n                ...removeCandidateFromPoints(board, [lastLink.next.point], firstLink.prev.cand)\r\n            ]\r\n\r\n            if(effects.length > 0){\r\n                return {effects, actors: chainToActors(chain)}\r\n            }\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nconst isGrouped = (chain: Link[]) => chain.some(link => link.prev.type === 'group' || link.next.type === 'group')\r\n\r\nexport const createFindChain = (board: SolverBoard, allowStopEarly = true) => {\r\n    const results: {name: string, result: TechniqueResult, depth: number}[] = []\r\n    const addResult = (result: TechniqueResult | null, name: string, chain) => {\r\n        if(result !== null){\r\n            const grouped = isGrouped(chain) ? 'Grouped' : ''\r\n            results.push({name: name + grouped, result, depth: chain.length})\r\n        }\r\n    }\r\n\r\n    let checked = 0\r\n\r\n    /*\r\n    Normally we check all chains up to a certain depth before stopping.\r\n    The reason is that we don't want to do the whole thing again when looking for the next chain type.\r\n    But looking through all these chains can be slow, and so we have to set the max depth to a low value.\r\n    Instead, we can have a middle ground with an early-stop criteria, and can therefore increase the depth slightly.\r\n     */\r\n    const shouldStopEarly = (depth: number) => {\r\n        if (!allowStopEarly) {\r\n            return false\r\n        }\r\n        // Stop it from running forever in case the number of chains in each depth is totally crazy\r\n        if (checked++ > 1000000) {\r\n            return true\r\n        }\r\n        if (results.length === 0) {\r\n            return false\r\n        }\r\n        // Favor loops\r\n        if (results.some(x => x.name.includes('loop'))) {\r\n            return true\r\n        }\r\n        // But we'll take an aic if it has more than one elimination\r\n        if (results.some(x => x.name.includes('aic') && x.result.effects.length > 1)) {\r\n            return true\r\n        }\r\n        // If we have a significantly shorter chain, always take it\r\n        if (results.some(x => x.depth <= depth - 2)) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    let initialized = false\r\n\r\n    const init = (name) => {\r\n        initialized = true\r\n        const maxDepth = 12\r\n        const unfilledPoints = getAllUnfilledPoints(board)\r\n        const table = createTable(board, unfilledPoints, allCandidates, true)\r\n        const keepLink = () => true\r\n        let depth = 0\r\n\r\n        iterateChainsInTable(table, keepLink, (chain: Link[], isLoop) => {\r\n            if(chain.length <= 2) return false\r\n\r\n            if(chain.length > depth){\r\n                depth = chain.length\r\n                // console.log(depth)\r\n            }\r\n\r\n            addResult(getDiscontinuousNiceLoop(board, chain, isLoop), 'discontinuousNiceLoop', chain)\r\n            addResult(getAicType1(board, chain, isLoop), 'aicType1', chain)\r\n            addResult(getAicType2(board, chain, isLoop), 'aicType2', chain)\r\n            addResult(getContinuousNiceLoop(board, chain, isLoop), 'continuousNiceLoop', chain)\r\n\r\n            if (shouldStopEarly(depth)) {\r\n                return true\r\n            }\r\n\r\n            return results.some(x => x.name === name)\r\n        }, maxDepth)\r\n\r\n        results.sort((a, b) => {\r\n            const actorsDiff = a.result.actors.length - b.result.actors.length\r\n            const effectsDiff = b.result.effects.length - a.result.effects.length\r\n            return actorsDiff !== 0 ? actorsDiff : effectsDiff\r\n        })\r\n    }\r\n\r\n    return (name) => {\r\n        if(!initialized){\r\n            init(name)\r\n        }\r\n        return results.find(x => x.name === name)?.result ?? null\r\n    }\r\n}\r\n\r\nexport const aicType1 = (findChain) => () => findChain('aicType1')\r\nexport const aicType2 = (findChain) => () => findChain('aicType2')\r\nexport const aicType1Grouped = (findChain) => () => findChain('aicType1Grouped')\r\nexport const aicType2Grouped = (findChain) => () => findChain('aicType2Grouped')\r\nexport const discontinuousNiceLoop = (findChain) => () => findChain('discontinuousNiceLoop')\r\nexport const discontinuousNiceLoopGrouped = (findChain) => () => findChain('discontinuousNiceLoopGrouped')\r\nexport const continuousNiceLoop = (findChain) => () => findChain('continuousNiceLoop')\r\nexport const continuousNiceLoopGrouped = (findChain) => () => findChain('continuousNiceLoopGrouped')","import { SolverBoard } from '../types'\r\nimport { removeCandidateFromAffectedPoints } from '../utils/effects'\r\nimport { allResults, first  } from '../utils/misc'\r\nimport {\r\n    allCandidates, cloneBoard, getAllHousesMinusFilledPoints,\r\n    getAllUnfilledPoints,\r\n    getBoardCell, getPointsWithCandidates,\r\n    getPointsWithNCandidates\r\n} from '../utils/sudokuUtils'\r\n\r\n/**\r\n * A BUG (binary universal grave) occurs when all cells have two candidates,\r\n * and all candidates appear twice in the houses it's in.\r\n * In case of a BUG, there cannot be a unique solution to the puzzle.\r\n */\r\nconst hasBug = (board: SolverBoard) => {\r\n    const allCellsHaveTwoCands = getAllUnfilledPoints(board).every(point => getBoardCell(board, point).candidates.length === 2)\r\n    if(!allCellsHaveTwoCands) return false\r\n\r\n    for(let cand of allCandidates){\r\n        for(let house of getAllHousesMinusFilledPoints(board)){\r\n            const occurrences = getPointsWithCandidates(board, house, [cand]).length\r\n            if(occurrences !== 2 && occurrences !== 0) return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\n/**\r\n * A BUG+1 is when there is a BUG plus one extra candidate in one cell.\r\n * This candidate must be placed to avoid the BUG.\r\n */\r\nfunction *bugPlus1Generator(board: SolverBoard){\r\n    const unfilled = getAllUnfilledPoints(board)\r\n    const triValuePoints = getPointsWithNCandidates(board, unfilled, 3)\r\n\r\n    if(triValuePoints.length !== 1) return null\r\n\r\n    const biValuePoints = getPointsWithNCandidates(board, unfilled, 2)\r\n\r\n    if(triValuePoints.length + biValuePoints.length !== unfilled.length) return null\r\n\r\n    const triValuePoint = triValuePoints[0]\r\n    const triValueCell = getBoardCell(board, triValuePoints[0])\r\n\r\n    const clonedBoard = cloneBoard(board)\r\n\r\n    for(let extraCand of triValueCell.candidates){\r\n        // Temporarily remove the cand to check if there is a bug left\r\n        clonedBoard[triValuePoint.y][triValuePoint.x].candidates = clonedBoard[triValuePoint.y][triValuePoint.x].candidates.filter(c => c !== extraCand)\r\n        const bug = hasBug(clonedBoard)\r\n        clonedBoard[triValuePoint.y][triValuePoint.x].candidates.push(extraCand)\r\n\r\n        if(bug){\r\n            yield {\r\n                actors: biValuePoints.map(point => ({point})),\r\n                effects: [\r\n                    {type: 'value', point: triValuePoint, number: extraCand} as const,\r\n                    ...removeCandidateFromAffectedPoints(board, triValuePoint, extraCand)\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport const bugPlus1 = (board: SolverBoard) => first(bugPlus1Generator(board))\r\nexport const allBugPlus1 = (board: SolverBoard) => allResults(bugPlus1Generator(board))","import { EliminationEffect, Point, SolverBoard } from '../types'\r\nimport { allCandidates, getAffectedPoints, getAllUnfilledPoints, getPointsWithCandidates } from '../utils/sudokuUtils'\r\nimport { createTable, getPointKey, SingleTable } from './chainGraph'\r\nimport { allResults, first, unique } from '../utils/misc'\r\nimport { removeCandidateFromPoints } from '../utils/effects'\r\n\r\nfunction *simpleColoringGenerator(board: SolverBoard){\r\n    const unfilledPoints = getAllUnfilledPoints(board)\r\n    const table: SingleTable = createTable(board, unfilledPoints, allCandidates, false) as SingleTable\r\n    const oppositeColor = (color) => color === 'yes' ? 'no' : 'yes'\r\n\r\n    const getNextQueueItems = (pointKey: number, cand: number, color: string) => {\r\n        return table[pointKey].links\r\n            .filter(link => link.prev.cand === cand && link.next.cand === cand && link.type === 'strong')\r\n            .map(link => ({ point: link.next.point, color }))\r\n    }\r\n\r\n    const colorFromPoint = (startingPoint: Point, cand: number) => {\r\n        const startingKey = getPointKey(startingPoint)\r\n        const colors = {[startingKey]: { color: 'yes', point: startingPoint }}\r\n        const queue = getNextQueueItems(startingKey, cand, 'no')\r\n\r\n        while(queue.length > 0){\r\n            const { point, color } = queue.shift()!\r\n\r\n            const key = getPointKey(point)\r\n            if(colors[key]) continue\r\n            colors[key] = {color, point}\r\n\r\n            queue.push(...getNextQueueItems(key, cand, oppositeColor(color)))\r\n        }\r\n\r\n        return colors\r\n    }\r\n\r\n    // Sort so we get easier results first\r\n    const candsWithPoints = allCandidates\r\n        .map(cand => {\r\n            return {\r\n                cand,\r\n                points: getPointsWithCandidates(board, unfilledPoints, [cand])\r\n            }\r\n        })\r\n        .sort((a, b) => a.points.length - b.points.length)\r\n\r\n    for(let { cand, points } of candsWithPoints){\r\n        // Avoid checking points within the same coloring multiple times\r\n        const checked = new Set()\r\n        for(let startingPoint of points){\r\n            if(checked.has(getPointKey(startingPoint))) continue\r\n\r\n            const colors = colorFromPoint(startingPoint, cand)\r\n\r\n            Object.values(colors).forEach(({point}) => {\r\n                checked.add(getPointKey(point))\r\n            })\r\n\r\n            if(Object.values(colors).length > 18) continue // 9*2=18, that is each e.g. row has a conjugate pair. Doesn't make sense to color in more than that?\r\n\r\n            const uncoloredPoints = points.filter(point => !colors[getPointKey(point)])\r\n\r\n            const effects: EliminationEffect[] = []\r\n\r\n            // Check color traps:\r\n            // All points seeing two different colors must be eliminated, since one of those colors must mean that the cand is set\r\n            for(let uncoloredPoint of uncoloredPoints){\r\n                const seenColors = unique(\r\n                    getAffectedPoints(uncoloredPoint)\r\n                        .map(affected => colors[getPointKey(affected)]?.color ?? '')\r\n                        .filter(color => color !== '')\r\n                )\r\n\r\n                if(seenColors.length === 2){\r\n                    effects.push(...removeCandidateFromPoints(board, [uncoloredPoint], cand))\r\n                }\r\n            }\r\n\r\n            // Check color wraps:\r\n            // Points with the same color seeing each other must all be false\r\n            for(let {point, color} of Object.values(colors)){\r\n                const seesSameColor = getAffectedPoints(point)\r\n                    .some(affected => colors[getPointKey(affected)]?.color === color)\r\n\r\n                if(seesSameColor){\r\n                    effects.push(...removeCandidateFromPoints(board, [point], cand))\r\n                }\r\n            }\r\n\r\n            const actors = Object.values(colors).map(x => ({point: x.point, cand, chainSet: x.color}))\r\n\r\n            if(effects.length > 0){\r\n                yield {effects, actors}\r\n            }\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport const simpleColoring = (board: SolverBoard) => first(simpleColoringGenerator(board))\r\nexport const allSimpleColorings = (board: SolverBoard) => allResults(simpleColoringGenerator(board))","import { Board, SolverBoard, SolveResult } from './types'\r\nimport { allBasicEliminations, basicElimination } from './solvers/basic'\r\nimport { fullHouse, hiddenSingle, nakedSingle } from './solvers/singles'\r\nimport { inversePointer, pointer } from './solvers/pointer'\r\nimport { hiddenPair, hiddenQuad, hiddenTriple, nakedPair, nakedQuad, nakedTriple } from './solvers/subset'\r\nimport {\r\n    jellyfish, jellyfishFinned, jellyfishFinnedSashimi,\r\n    swordfish,\r\n    swordfishFinned,\r\n    swordfishFinnedSashimi,\r\n    xWing,\r\n    xWingFinned,\r\n    xWingFinnedSashimi\r\n} from './solvers/fish'\r\nimport { hiddenRectangle, uniqueRectangle1 } from './solvers/uniqueRectangle'\r\nimport { skyscraper } from './solvers/skyscraper'\r\nimport { emptyRectangle } from './solvers/emptyRectangle'\r\nimport { wWing, xyWing, xyzWing } from './solvers/wing'\r\nimport { boardHasError, isBoardFinished, mergeResults } from './utils/sudokuUtils'\r\nimport { unique } from './utils/misc'\r\nimport { applyEffects } from './utils/effects'\r\nimport { bruteForce } from './solvers/bruteForce'\r\nimport {\r\n    aicType1,\r\n    aicType1Grouped,\r\n    aicType2,\r\n    aicType2Grouped,\r\n    continuousNiceLoop,\r\n    continuousNiceLoopGrouped, createFindChain,\r\n    discontinuousNiceLoop,\r\n    discontinuousNiceLoopGrouped,\r\n    remotePairChain,\r\n    xChain,\r\n    xyChain\r\n} from './solvers/chains'\r\nimport { bugPlus1 } from './solvers/bug'\r\nimport { simpleColoring } from './solvers/simpleColoring'\r\n\r\nexport const techniques = [\r\n    {type: 'basic', difficulty: 'easy'},\r\n    {type: 'fullHouse', difficulty: 'easy'}, // Easy newspaper style\r\n    {type: 'hiddenSingle', difficulty: 'easy'}, // Can be easy or hard tbh, but with highlighting it's often easy\r\n    {type: 'pointer', difficulty: 'medium'},\r\n    {type: 'inversePointer', difficulty: 'medium'},\r\n    {type: 'nakedSingle', difficulty: 'medium'}, // Note: Fullhouse is included earlier, so this naked single might actually be very hard to find sometimes\r\n    {type: 'nakedPair', difficulty: 'medium'},\r\n    {type: 'hiddenPair', difficulty: 'hard'},\r\n    {type: 'xWing', difficulty: 'hard'}, // When you know about it, easier than triples\r\n    {type: 'nakedTriple', difficulty: 'hard'},\r\n    {type: 'hiddenTriple', difficulty: 'hard'},\r\n    {type: 'nakedQuad', difficulty: 'hard'}, // At least it's naked, but 4 is a lot :P\r\n    {type: 'uniqueRectangle1', difficulty: 'expert'}, // Type 1 is quite easy to spot when you know about it. The others, not so much.\r\n    {type: 'bugPlus1', difficulty: 'expert'}, // BUG+1 is a quick way to finish a puzzle\r\n    {type: 'skyscraper', difficulty: 'expert'}, // A bit harder than x-wing. A bit more chainy\r\n    {type: 'swordfish', difficulty: 'expert'}, // Quite hard to spot, but easier with highlighting\r\n    {type: 'emptyRectangle', difficulty: 'expert'}, // Not too hard to spot when you know about it. A bit chainy\r\n    {type: 'hiddenQuad', difficulty: 'expert'}, // Quite hard to spot imo, but not chainy\r\n    {type: 'xWingFinned', difficulty: 'expert'},\r\n    {type: 'xWingFinnedSashimi', difficulty: 'expert'},\r\n    {type: 'remotePairChain', difficulty: 'artisan'}, // Easy chain to spot if you have all candidates\r\n    {type: 'wWing', difficulty: 'artisan'}, // More of a pattern than xyWing imo\r\n    {type: 'hiddenRectangle', difficulty: 'artisan'}, // Much harder than unique rect type 1\r\n    {type: 'jellyfish', difficulty: 'artisan'}, // Highlights is a must for jellyfish\r\n    {type: 'xyWing', difficulty: 'artisan'}, // Chainy. Quite hard to spot\r\n    {type: 'xyzWing', difficulty: 'artisan'}, // Same as xywing, but even more digits, so a bit harder.\r\n    {type: 'swordfishFinned', difficulty: 'artisan'},\r\n    {type: 'swordfishFinnedSashimi', difficulty: 'artisan'},\r\n    {type: 'simpleColoring', difficulty: 'master'}, // Quite time consuming, but not actually that hard\r\n    {type: 'xChain', difficulty: 'master'}, // Let's have a stare shall we?\r\n    {type: 'xyChain', difficulty: 'master'}, // Stare even harder...\r\n    {type: 'jellyfishFinned', difficulty: 'jedi'},\r\n    {type: 'jellyfishFinnedSashimi', difficulty: 'jedi'},\r\n    {type: 'discontinuousNiceLoop', difficulty: 'jedi'}, // Stare even more harder...\r\n    {type: 'aicType1', difficulty: 'jedi'}, // Stare even more harder...\r\n    {type: 'aicType2', difficulty: 'jedi'}, // Stare even more harder...\r\n    {type: 'continuousNiceLoop', difficulty: 'jedi'}, // Stare even more harder...\r\n    {type: 'discontinuousNiceLoopGrouped', difficulty: 'jedi'}, // Stare even more harder...\r\n    {type: 'aicType1Grouped', difficulty: 'jedi'}, // Stare even more harder...\r\n    {type: 'aicType2Grouped', difficulty: 'jedi'}, // Stare even more harder...\r\n    {type: 'continuousNiceLoopGrouped', difficulty: 'jedi'}, // Stare even more harder...\r\n    {type: 'bruteForce', difficulty: 'jedi'} // Stare for days\r\n]\r\n\r\nconst createTechniqueRunners = (board: SolverBoard) => {\r\n    const findChain = createFindChain(board)\r\n    return {\r\n        basic: basicElimination,\r\n        fullHouse,\r\n        hiddenSingle,\r\n        pointer,\r\n        inversePointer,\r\n        nakedSingle,\r\n        nakedPair,\r\n        hiddenPair,\r\n        xWing,\r\n        nakedTriple,\r\n        hiddenTriple,\r\n        nakedQuad,\r\n        uniqueRectangle1,\r\n        bugPlus1,\r\n        skyscraper,\r\n        swordfish,\r\n        emptyRectangle,\r\n        hiddenQuad,\r\n        xWingFinned,\r\n        xWingFinnedSashimi,\r\n        remotePairChain,\r\n        hiddenRectangle,\r\n        wWing,\r\n        jellyfish: jellyfish,\r\n        xyWing,\r\n        xyzWing,\r\n        swordfishFinned,\r\n        swordfishFinnedSashimi,\r\n        simpleColoring,\r\n        xChain,\r\n        xyChain,\r\n        jellyfishFinned,\r\n        jellyfishFinnedSashimi,\r\n        discontinuousNiceLoop: discontinuousNiceLoop(findChain),\r\n        aicType1: aicType1(findChain),\r\n        aicType2: aicType2(findChain),\r\n        continuousNiceLoop: continuousNiceLoop(findChain),\r\n        discontinuousNiceLoopGrouped: discontinuousNiceLoopGrouped(findChain),\r\n        aicType1Grouped: aicType1Grouped(findChain),\r\n        aicType2Grouped: aicType2Grouped(findChain),\r\n        continuousNiceLoopGrouped: continuousNiceLoopGrouped(findChain),\r\n        bruteForce: bruteForce,\r\n    }\r\n}\r\n\r\nexport const difficulties = unique(techniques.map(t => t.difficulty))\r\n\r\nexport const difficultyLevels = {\r\n    easy: 1,\r\n    medium: 2,\r\n    hard: 3,\r\n    expert: 4,\r\n    artisan: 5,\r\n    master: 6,\r\n    jedi: 7\r\n}\r\nexport const getDifficultyLevel = (difficulty: string) => difficultyLevels[difficulty]\r\n\r\nexport const getDifficulty = (techniqueType: string) => {\r\n    const difficulty = techniques.find(t => t.type === techniqueType)!.difficulty\r\n    return {difficulty, level: difficultyLevels[difficulty]}\r\n}\r\nexport const getOverallDifficulty = (techniqueTypes: string[]) => {\r\n    const difficulty = [...techniques].reverse().find(t => techniqueTypes.includes(t.type))!.difficulty\r\n    return {difficulty, level: difficultyLevels[difficulty]}\r\n}\r\n\r\nexport const getSolution = (board: SolverBoard) => {\r\n    return applyTechniques(board, ['bruteForce'])\r\n}\r\n\r\n/**\r\n * Runs techniques in order until one that works is found\r\n */\r\nexport const runTechnique = (board: SolverBoard) => {\r\n    const techniqueRunners = createTechniqueRunners(board)\r\n    for(let technique of techniques){\r\n        const result = techniqueRunners[technique.type](board)\r\n        if(result){\r\n            return {\r\n                ...result,\r\n                technique: technique.type\r\n            }\r\n        }\r\n    }\r\n\r\n    return null\r\n}\r\n\r\n/**\r\n * Apply given techniques until the board is solved, or the techniques don't work anymore\r\n */\r\nexport const applyTechniques = (board: SolverBoard, techniqueTypes: string[]): Board => {\r\n    while(true){\r\n        if(isBoardFinished(board)){\r\n            return board\r\n        }\r\n        let moreToGo = false\r\n        for(let techType of techniqueTypes){\r\n            const techniqueRunners = createTechniqueRunners(board)\r\n            const tech = techniques.find(t => t.type === techType)\r\n            if(!tech) throw new Error('Unknown technique type')\r\n            const res = techniqueRunners[tech.type](board)\r\n            if(res){\r\n                board = applyEffects(board, res.effects)\r\n                moreToGo = true\r\n            }\r\n        }\r\n        if(!moreToGo){\r\n            return board\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Basic elimination is just using the constraints of sudoku alone\r\n */\r\nexport const applyBasicEliminations = (board: SolverBoard): SolverBoard => {\r\n    const result = mergeResults(allBasicEliminations(board))\r\n    return applyEffects(board, result.effects)\r\n}\r\n\r\n/**\r\n * Board needs to be prepared with all candidates before running iterate\r\n */\r\nexport const iterate = (board: SolverBoard): SolveResult | null => {\r\n    const result = runTechnique(board)\r\n    if(result){\r\n        board = applyEffects(board, result.effects)\r\n        return {board, ...result}\r\n    }\r\n\r\n    if(isBoardFinished(board)){\r\n        return {board, effects: [], actors: [], technique: 'done'}\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport const getTechniquesRequiredForSolvingBoard = (board: SolverBoard) => {\r\n    const solution = getSolution(board)\r\n\r\n    const techniques: string[] = []\r\n    while(true){\r\n        const res = iterate(board)\r\n        if(res === null){\r\n            throw new Error('Unsupported technique required')\r\n        }\r\n        if(boardHasError(board, solution)){\r\n            throw new Error('Board has error ' + techniques.join(', '))\r\n        }\r\n        if(res.technique === 'done'){\r\n            break\r\n        }\r\n        board = res.board\r\n        techniques.push(res.technique)\r\n    }\r\n    return unique(techniques)\r\n}","import { Board, Cell, Effect, InputMode, Point, SolverBoard } from './types'\r\nimport { allCandidates, cloneBoard, getAllPoints } from './utils/sudokuUtils'\r\nimport { applyEffects, toggleCandidate, toggleValue } from './utils/effects'\r\nimport * as solve from './solve'\r\n\r\nexport const boardFromInput = (input: number[][]) => {\r\n    let board: Board = []\r\n    for(let y = 0; y < 9; y++){\r\n        let row: Cell[] = []\r\n        for(let x = 0; x < 9; x++){\r\n            if(input[y][x] !== 0){\r\n                row.push({\r\n                    value: input[y][x],\r\n                    given: true,\r\n                    candidates: []\r\n                })\r\n            }else{\r\n                row.push({\r\n                    value: null,\r\n                    given: false,\r\n                    candidates: []\r\n                })\r\n            }\r\n        }\r\n        board.push(row)\r\n    }\r\n    return board\r\n}\r\n\r\nexport const boardFromStr = (input: string) => {\r\n    return boardFromInput(\r\n        [...input.matchAll(/\\d{9}/g)]\r\n            .map(x => x[0].split('').map(Number))\r\n    )\r\n}\r\n\r\nexport const boardToStr = (board: Board) => {\r\n    let boardStr = ''\r\n    for(let y = 0; y < 9; y++){\r\n        for(let x = 0; x < 9; x++){\r\n            const cell = board[y][x]\r\n            boardStr += cell.value === null ? '0' : String(cell.value)\r\n        }\r\n    }\r\n    return boardStr\r\n}\r\n\r\nexport const resetCandidates = (board: Board): SolverBoard => {\r\n    board = cloneBoard(board)\r\n    for(let point of getAllPoints()){\r\n        board[point.y][point.x].candidates = board[point.y][point.x].value === null ? allCandidates : []\r\n    }\r\n    return board as SolverBoard\r\n}\r\n\r\nexport const applyInputValue = (board: Board, points: Point[], digit: number, mode: InputMode): Board => {\r\n    let effects: Effect[] = []\r\n    if(points.length === 1){\r\n        if(mode === 'candidates'){\r\n            effects = toggleCandidate(board, points, digit)\r\n        }else if(mode === 'value'){\r\n            effects = toggleValue(board, points[0], digit)\r\n        }\r\n    }else if(points.length >= 2){\r\n        effects = toggleCandidate(board, points, digit)\r\n    }\r\n\r\n    return applyEffects(board, effects)\r\n}\r\n\r\nexport const prepareBoardForSolver = (board: Board): SolverBoard => {\r\n    board = resetCandidates(board)\r\n    board = solve.applyBasicEliminations(board)\r\n    return board\r\n}\r\n\r\n/**\r\n * Iterates solver until the next digit can be placed.\r\n */\r\nexport const getTechniquesUntilNextValue = (board: SolverBoard) => {\r\n    const techniques: string[] = []\r\n\r\n    let res = solve.iterate(board)\r\n    res !== null && techniques.push(res.technique)\r\n\r\n    while(res !== null && res.technique !== 'done' && !res.effects.some(eff => eff.type === 'value')){\r\n        res = solve.iterate(res.board)\r\n        res !== null && techniques.push(res.technique)\r\n    }\r\n\r\n    return techniques\r\n}","import { createSelector } from 'reselect'\r\nimport { Board } from './core/types'\r\nimport { getSolution } from './core/solve'\r\nimport { boardHasError, boardIsComplete } from './core/utils/sudokuUtils'\r\nimport { getTechniquesUntilNextValue, prepareBoardForSolver } from './core/sudoku'\r\nimport { State, UserData } from './state'\r\nimport { BoardMetaData } from './core/utils/getBoardMetaData'\r\n\r\nexport const selectSolution = createSelector(\r\n    (state: State) => state.game?.initialBoard ?? null,\r\n    (board: Board | null) => {\r\n        if (!board) return null\r\n        return getSolution(board)\r\n    }\r\n)\r\nexport const selectHasError = createSelector(\r\n    (state: State) => state.game?.board ?? null,\r\n    selectSolution,\r\n    (board: Board | null, solution: Board | null) => {\r\n        if (!board || !solution) return null\r\n        return boardHasError(board, solution)\r\n    }\r\n)\r\nexport const selectIsComplete = createSelector(\r\n    (state: State) => state.game?.board ?? null,\r\n    (board: Board | null) => {\r\n        if (!board) return false\r\n        return boardIsComplete(board)\r\n    }\r\n)\r\nexport const selectHints = createSelector(\r\n    (state: State) => state.game?.board ?? null,\r\n    selectHasError,\r\n    (board: Board | null, hasError: boolean | null) => {\r\n        if (!board || hasError === null) return []\r\n        if (hasError) return []\r\n        return getTechniquesUntilNextValue(prepareBoardForSolver(board))\r\n    }\r\n)\r\nexport const selectPuzzles = createSelector(\r\n    (state: State) => state.puzzles,\r\n    (puzzles: BoardMetaData[]) => puzzles\r\n)\r\nexport const selectUserData = createSelector(\r\n    (state: State) => state.userData,\r\n    (userData: UserData) => userData\r\n)","import {\r\n    Actor,\r\n    Board,\r\n    Cell,\r\n    Effect,\r\n    EliminationEffect,\r\n    Point,\r\n    SolveResult,\r\n    ValueEffect\r\n} from '../core/types'\r\nimport React from 'react'\r\nimport { allCandidates, getAffectedPoints, getBoardCell, getPointId, pointsEqual } from '../core/utils/sudokuUtils'\r\nimport useEventListener from '@use-it/event-listener'\r\nimport {\r\n    actorCandidateColor, actorChainCandidateNoColor, actorChainCandidateYesColor,\r\n    actorColor,\r\n    affectedColor,\r\n    boardBackgroundColor,\r\n    boardBorderColor,\r\n    boardBorderHardColor, eliminateCandidateColor,\r\n    eliminationColor,\r\n    errorColor,\r\n    getContrastText, highlightedCandidateColor,\r\n    highlightedColor,\r\n    selectedColor,\r\n    selectedDigitHighlightColor, setCandidateColor,\r\n    setValueColor\r\n} from '../theme'\r\nimport { darken } from '@material-ui/core/styles'\r\nimport { actions } from '../index'\r\nimport { useSelector } from 'react-redux'\r\nimport { State } from '../state'\r\nimport { selectSolution } from '../selectors'\r\n\r\nconst Candidates = (props) => {\r\n    const height = props.height\r\n    const fontSize = height / 4\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                display: 'grid',\r\n                gridTemplateColumns: '1fr 1fr 1fr',\r\n                gridTemplateRows: '1fr 1fr 1fr',\r\n                gap: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                fontSize: fontSize,\r\n                fontFamily: 'monospace',\r\n                color: 'inherit'\r\n            }}\r\n        >\r\n            {allCandidates.map(number => {\r\n                return (\r\n                    <div\r\n                        style={{\r\n                            background: props.bgs[number] ?? '',\r\n                            width: '100%',\r\n                            height: '100%',\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center'\r\n                        }}\r\n                        key={number}\r\n                    >\r\n                        {props.candidates.includes(number) && number}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype CellDisplayProps = {\r\n    solveResult: SolveResult | null\r\n    selected: boolean\r\n    affected: boolean\r\n    cell: Cell\r\n    cellHeight: number\r\n    point: Point\r\n    highlightedNumber: number | null\r\n    selectedDigit: number | null\r\n    hasError: boolean\r\n    celebration: boolean\r\n}\r\n\r\nconst cellHasElimination = (effects: Effect[], point: Point) => effects\r\n    .filter((eff: Effect) => eff.type === 'elimination')\r\n    .some((eff) => pointsEqual((eff as EliminationEffect).point, point))\r\n\r\nconst cellHasSetValue = (effects: Effect[], point: Point) => effects\r\n    .filter((eff: Effect) => eff.type === 'value')\r\n    .some((eff) => pointsEqual((eff as ValueEffect).point, point))\r\n\r\nconst cellHasActor = (actors: Actor[], point: Point) => actors\r\n    .some(actor => pointsEqual(actor.point, point))\r\n\r\nconst getCellBackgroundColor = (\r\n    actors: Actor[],\r\n    effects: Effect[],\r\n    point: Point,\r\n    cell: Cell,\r\n    affected: boolean,\r\n    selected: boolean,\r\n    highlightedNumber: number | null,\r\n    selectedDigit: number | null,\r\n    hasError: boolean\r\n) => {\r\n    const hasElimination = cellHasElimination(effects, point)\r\n    const hasSetValue = cellHasSetValue(effects, point)\r\n    const hasActor = cellHasActor(actors, point)\r\n\r\n    let bg = boardBackgroundColor\r\n    if(affected) bg = affectedColor\r\n    if(hasElimination) bg = eliminationColor\r\n    if(hasActor) bg = actorColor\r\n    if(hasSetValue) bg = setValueColor\r\n\r\n    if((cell.value && cell.value === highlightedNumber)){\r\n        bg = highlightedColor\r\n    }\r\n    if(cell.candidates.some(c => c === highlightedNumber)){\r\n        bg = highlightedCandidateColor\r\n    }\r\n\r\n    // Highlighted number takes precedence over selected digit highlighting\r\n    // Don't highlight selected digit if cell has highlighting already\r\n    if(!highlightedNumber){\r\n        if((cell.value && cell.value === selectedDigit) || cell.candidates.some(c => c === selectedDigit)){\r\n            bg = selectedDigitHighlightColor\r\n        }\r\n    }\r\n\r\n    if(selected) bg = selectedColor\r\n    if(hasError) bg = errorColor\r\n\r\n    return bg\r\n}\r\n\r\nconst getCandidateBackgrounds = (actors: Actor[], effects: Effect[], cell: Cell, point: Point) => {\r\n    const bgs: {[key: number]: string} = {}\r\n\r\n    actors = actors.filter(actor => pointsEqual(actor.point, point))\r\n    effects = effects.filter(eff => eff.type !== 'none' && pointsEqual(eff.point, point))\r\n\r\n    for(const actor of actors){\r\n        if(actor.cand){\r\n            bgs[actor.cand] = actorCandidateColor\r\n            if(actor.chainSet === 'yes'){\r\n                bgs[actor.cand] = actorChainCandidateYesColor\r\n            }\r\n            if(actor.chainSet === 'no'){\r\n                bgs[actor.cand] = actorChainCandidateNoColor\r\n            }\r\n        }\r\n    }\r\n\r\n    for(const eff of effects){\r\n        if(eff.type === 'elimination'){\r\n            for(let cand of eff.numbers){\r\n                bgs[cand] = eliminateCandidateColor\r\n            }\r\n        }\r\n        if(eff.type === 'value' && eff.number !== null){\r\n            bgs[eff.number] = setCandidateColor\r\n        }\r\n    }\r\n\r\n    return bgs\r\n}\r\n\r\nconst CellDisplay = (props: CellDisplayProps) => {\r\n    const {effects, actors} = props.solveResult ?? {effects: [], actors: []}\r\n    const {point, selected, affected, cell, highlightedNumber, selectedDigit, celebration, hasError} = props\r\n    const [celebrationCounter, setCelebrationCount] = React.useState(0)\r\n\r\n    React.useEffect(() => {\r\n        setCelebrationCount(0)\r\n    }, [celebration])\r\n\r\n    React.useEffect(() => {\r\n        if(celebration){\r\n            if(celebrationCounter < 100) {\r\n                setTimeout(() => {\r\n                    setCelebrationCount(celebrationCounter + 1)\r\n                }, 50)\r\n            }\r\n        }\r\n    })\r\n\r\n    let bg = React.useMemo(() =>\r\n        getCellBackgroundColor(actors, effects, point, cell, affected, selected, highlightedNumber, selectedDigit, hasError)\r\n    , [actors, effects, point, cell, affected, selected, highlightedNumber, selectedDigit, hasError])\r\n\r\n    const candBgs = React.useMemo(() =>\r\n        getCandidateBackgrounds(actors, effects, cell, point)\r\n    , [actors, effects, cell, point])\r\n\r\n    if(props.celebration){\r\n        const pointNumber = (point.y * 9 + point.x)\r\n        const pointOfHundred = Math.round((pointNumber/81)*100)\r\n        const seed = ((pointOfHundred + celebrationCounter)%100)/100\r\n        bg = darken(selectedColor, seed)\r\n    }\r\n\r\n    let style: any = {\r\n        backgroundColor: bg,\r\n        color: getContrastText(bg),\r\n        border: '1px solid',\r\n        borderColor: boardBorderColor,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '100%',\r\n        width: '100%',\r\n        lineHeight: 1\r\n    }\r\n    const {x, y} = point\r\n    const addHardBorder = (side) => {\r\n        style = {...style, ['border' + side]: '2px solid ' + boardBorderHardColor}\r\n    }\r\n    if(x % 3 === 0 && x > 0) addHardBorder('Left')\r\n    if(y % 3 === 0 && y > 0) addHardBorder('Top')\r\n    if(x === 0) addHardBorder('Left')\r\n    if(x === 8) addHardBorder('Right')\r\n    if(y === 0) addHardBorder('Top')\r\n    if(y === 8) addHardBorder('Bottom')\r\n\r\n    return (\r\n        <div style={style}>\r\n            {cell.value === null\r\n                ? <Candidates candidates={cell.candidates} bgs={candBgs} height={props.cellHeight} />\r\n                : <span style={{ fontSize: Math.floor(props.cellHeight/2) }}>{cell.value}</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type BoardDisplayProps = {\r\n    board: Board\r\n    solveResult: SolveResult | null\r\n    celebration: boolean\r\n}\r\n\r\nexport const BoardDisplay = (props: BoardDisplayProps) => {\r\n    const { board, celebration } = props\r\n    const [isSelecting, setIsSelecting] = React.useState(false)\r\n\r\n    const ref = React.useRef<HTMLDivElement | null>(null)\r\n    const [height, setHeight] = React.useState(400)\r\n    const cellHeight = height / 9\r\n\r\n    // Preserve aspect ratio of the board.\r\n    // We add an absolutely positioned div with width and height 100% to measure from.\r\n    // We calculate those percents in pixels, and set both width and height to be the smallest of the two.\r\n    React.useEffect(() => {\r\n        const setBoardHeightDom = () => {\r\n            if (ref?.current?.clientWidth && ref.current?.clientHeight) {\r\n                const currentWidth = ref.current?.clientWidth\r\n                const currentHeight = ref.current?.clientHeight\r\n                const min = Math.min(currentWidth, currentHeight)\r\n                setHeight(min)\r\n            }\r\n        }\r\n        const setHeightAndRequest = () => {\r\n            setBoardHeightDom()\r\n            window.requestAnimationFrame(setHeightAndRequest)\r\n        }\r\n\r\n        setHeightAndRequest()\r\n    }, [ref, setHeight])\r\n\r\n    const solutionBoard = useSelector(selectSolution)\r\n    const selectedCells = useSelector((state: State) => state.selectedCells)\r\n    const selectedDigit = useSelector((state: State) => state.selectedDigit)\r\n\r\n    const highlightedNumber = selectedCells.length === 1 ? board[selectedCells[0].y][selectedCells[0].x].value : null\r\n    const affectedPoints = React.useMemo(() => selectedCells.length === 1 ? getAffectedPoints(selectedCells[0]) : [], [selectedCells])\r\n\r\n    const startSelect = (point: Point, e: React.MouseEvent) => {\r\n        if(e.ctrlKey){\r\n            actions.addSelectedCell(point)\r\n        }else{\r\n            actions.setSelectedCells([point])\r\n        }\r\n        setIsSelecting(true)\r\n    }\r\n    const startSelectTouch = (point: Point) => {\r\n        actions.setSelectedCells([point])\r\n        setIsSelecting(true)\r\n    }\r\n    const addSelect = (point: Point) => {\r\n        if(isSelecting){\r\n            actions.addSelectedCell(point)\r\n        }\r\n    }\r\n    const endSelect = React.useCallback(() => {\r\n        setIsSelecting(false)\r\n    }, [])\r\n\r\n    useEventListener('mouseup', endSelect)\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                width: '100%',\r\n                height: '100%',\r\n                position: 'relative',\r\n                display: 'flex',\r\n                justifyContent: 'center'\r\n            }}\r\n        >\r\n            {/* Add a dummy div that is used to measure the current widths and heights */}\r\n            <div\r\n                ref={ref}\r\n                style={{\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute',\r\n                    zIndex: -1\r\n                }}\r\n            />\r\n            <div\r\n                style={{\r\n                    width: height,\r\n                    height: height,\r\n                    display: 'grid',\r\n                    gridTemplateColumns: '1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr',\r\n                    gridTemplateRows: '1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr',\r\n                    gap: 0,\r\n                }}\r\n            >\r\n                {board.flatMap((row, y) => {\r\n                    return row.map((cell, x) => {\r\n                        const id = getPointId(x, y)\r\n                        const point: Point = {x, y, id}\r\n                        const selected = selectedCells.some(p => pointsEqual(p, point))\r\n                        const affected = affectedPoints.some(p => pointsEqual(p, point))\r\n                        const hasError = !!solutionBoard && cell.value !== null && cell.value !== getBoardCell(solutionBoard, point).value\r\n\r\n                        return (\r\n                            <div\r\n                                key={id}\r\n                                data-x={x}\r\n                                data-y={y}\r\n                                className={'touchevents-suck'}\r\n                                onMouseDown={(e) => startSelect({x, y, id: getPointId(x, y)}, e)}\r\n                                onMouseOver={() => addSelect({x, y, id: getPointId(x, y)})}\r\n                                onMouseUp={endSelect}\r\n                                onTouchStart={() => startSelectTouch({x, y, id: getPointId(x, y)})}\r\n                                onTouchMove={(e) => {\r\n                                    const loc = e.touches[0]\r\n\r\n                                    const target = document.elementFromPoint(loc.clientX, loc.clientY)\r\n                                    const actualTarget = target?.closest('.touchevents-suck')\r\n\r\n                                    const xStr = actualTarget?.getAttribute('data-x')\r\n                                    const yStr = actualTarget?.getAttribute('data-y')\r\n\r\n                                    if (!(xStr && yStr)) {\r\n                                        return\r\n                                    }\r\n                                    const x = Number(xStr)\r\n                                    const y = Number(yStr)\r\n\r\n                                    addSelect({x, y, id: getPointId(x, y)})\r\n                                }}\r\n                                onTouchCancel={endSelect}\r\n                                onTouchEnd={endSelect}\r\n                                style={{\r\n                                    'WebkitTouchCallout': 'none',\r\n                                    'WebkitUserSelect': 'none',\r\n                                    'KhtmlUserSelect': 'none',\r\n                                    'MozUserSelect': 'none',\r\n                                    'msUserSelect': 'none',\r\n                                    'userSelect': 'none',\r\n                                    height: '100%',\r\n                                }}\r\n                            >\r\n                                <CellDisplay\r\n                                    cell={cell}\r\n                                    cellHeight={cellHeight}\r\n                                    selected={selected}\r\n                                    affected={affected}\r\n                                    point={point}\r\n                                    solveResult={props.solveResult}\r\n                                    highlightedNumber={highlightedNumber}\r\n                                    selectedDigit={selectedDigit}\r\n                                    hasError={hasError}\r\n                                    celebration={celebration}\r\n                                />\r\n                            </div>\r\n                        )\r\n                    })\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Board, Point, SolveResult } from '../core/types'\r\nimport * as solve from '../core/solve'\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\r\nimport Button from '@material-ui/core/Button'\r\nimport { actorColor, eliminationColor, setValueColor } from '../theme'\r\nimport { mobileMediaQuery } from './app'\r\n\r\nexport type SolverProps = {\r\n    board: Board\r\n    solveResult: SolveResult | null\r\n    onSolveResult: (solveResult: SolveResult | null, prevBoard: Board) => void\r\n    onPlayFromHere: () => void\r\n}\r\n\r\nconst pointToStr = (point: Point) => `r${point.y+1}c${point.x+1}`\r\n\r\nexport const Solver = (props: SolverProps) => {\r\n    const { board, solveResult, onSolveResult } = props\r\n    const [skippedTechniques, setSkippedTechniques] = React.useState<string[]>([])\r\n    const isMobile = useMediaQuery(mobileMediaQuery)\r\n\r\n    const onToggleTechnique = React.useCallback((type: string) => {\r\n        setSkippedTechniques(s => {\r\n            if(s.some(t => t === type)){\r\n                return s.filter(t => t !== type)\r\n            }else{\r\n                return [...s, type]\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const iterate = React.useCallback(() => {\r\n        let boardBeforeSolve = board\r\n        let res = solve.iterate(boardBeforeSolve)\r\n        while(res !== null && skippedTechniques.includes(res.technique)){\r\n            boardBeforeSolve = res.board\r\n            res = solve.iterate(boardBeforeSolve)\r\n        }\r\n        onSolveResult(res, boardBeforeSolve)\r\n    }, [board, skippedTechniques, onSolveResult])\r\n\r\n    return (\r\n        <div>\r\n            <h3>Solver</h3>\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                <Button color='primary' variant='outlined' fullWidth onClick={props.onPlayFromHere}>Play from here</Button>\r\n            </div>\r\n            <br />\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                <Button color='primary' variant='contained' fullWidth onClick={iterate}>Iterate</Button>\r\n            </div>\r\n            {solveResult && solveResult.technique !== 'done' &&\r\n            <div>\r\n                <i>Technique:</i>\r\n                <br />\r\n                {solveResult.technique}\r\n                <br />\r\n                <i>Actors:</i>\r\n                <br />\r\n                <span style={{ background: actorColor }}>&nbsp;&nbsp;</span>\r\n                {solveResult.actors.map((actor, i) => {\r\n                    return (\r\n                        <span key={i}>{' '}\r\n                            {pointToStr(actor.point)}\r\n                            {actor.cand && `[${actor.cand}]`}\r\n                            {actor.chainSet && `${actor.chainSet === 'yes' ? 'T' : 'F'}`}\r\n                        </span>\r\n                    )\r\n                })}\r\n                <br />\r\n                <i>Effects:</i>\r\n                {solveResult.effects.map((effect, i) => {\r\n                    return (\r\n                        <div key={i}>\r\n                            {effect.type === 'elimination' &&\r\n                            <div>\r\n                                <span style={{ background: eliminationColor }}>&nbsp;&nbsp;</span>\r\n                                Eliminate {effect.numbers.join(',')} from {pointToStr(effect.point)}\r\n                            </div>\r\n                            }\r\n                            {effect.type === 'value' &&\r\n                            <div>\r\n                                <span style={{ background: setValueColor }}>&nbsp;&nbsp;</span>\r\n                                Set {effect.number} at {pointToStr(effect.point)}\r\n                            </div>\r\n                            }\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            }\r\n            {!isMobile &&\r\n            <div>\r\n                <h4>Skip techniques</h4>\r\n                <div style={{display: 'flex', flexDirection: 'column'}}>\r\n                    {solve.techniques.map(tech => {\r\n                        const skipped = skippedTechniques.some(t => t === tech.type)\r\n                        return (\r\n                            <Button\r\n                                key={tech.type}\r\n                                size='small'\r\n                                color='default'\r\n                                fullWidth={true}\r\n                                variant='outlined'\r\n                                style={{color: skipped ? 'red' : ''}}\r\n                                onClick={() => onToggleTechnique(tech.type)}\r\n                            >\r\n                                {tech.type}\r\n                            </Button>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { BoardMetaData } from '../core/utils/getBoardMetaData'\r\nimport Button from '@material-ui/core/Button'\r\nimport { difficulties } from '../core/solve'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectPuzzles, selectUserData } from '../selectors'\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery'\r\nimport { mobileMediaQuery } from './app'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { boardBackgroundColor } from '../theme'\r\n\r\nexport type PuzzleSelectProps = {\r\n    onPuzzleSelect: (puzzle: BoardMetaData, fromProgress: boolean) => void\r\n}\r\n\r\ntype Tab = {\r\n    type: 'difficulty'\r\n    difficulty: string\r\n} | {\r\n    type: 'custom'\r\n}\r\n\r\nexport const PuzzleSelect = (props: PuzzleSelectProps) => {\r\n    const isMobile = useMediaQuery(mobileMediaQuery)\r\n    const userData = useSelector(selectUserData)\r\n    const puzzleData = useSelector(selectPuzzles)\r\n\r\n    const [selectedTab, setSelectedTab] = React.useState<Tab>({ type: 'difficulty', difficulty: 'easy' })\r\n    const [showTechniques, setShowTechniques] = React.useState(false)\r\n\r\n    const puzzles = selectedTab.type === 'custom'\r\n        ? userData.custom.sort((a, b) => new Date(a.date) > new Date(b.date) ? 1 : -1).map(c => c.meta)\r\n        : puzzleData\r\n            .filter(puzzle => puzzle.difficulty.difficulty === selectedTab.difficulty)\r\n            .sort((a, b) => a.techniques.length - b.techniques.length)\r\n\r\n    const maxNumberOfTechniques = Math.max(...puzzles.map(t => t.techniques.length))\r\n\r\n    const table = (\r\n        <Table size={'small'}>\r\n            <TableHead>\r\n                <TableRow>\r\n                    <TableCell width={10}>#</TableCell>\r\n                    <TableCell width={250}>Name</TableCell>\r\n                    <TableCell width={40} align={'left'} />\r\n                    <TableCell width={40}>Intensity</TableCell>\r\n                    <TableCell width={200} />\r\n                    <TableCell>{showTechniques && 'Techniques'}</TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {puzzles.map((puzzle, i) => {\r\n                    const solved = userData.solved.includes(puzzle.boardData)\r\n                    const hasProgress = !!userData.progress[puzzle.boardData]\r\n                    return (\r\n                        <TableRow key={i} hover>\r\n                            <TableCell>\r\n                                {i+1}.\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {puzzle.name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {solved &&\r\n                                <Typography color={'primary'}>Solved!</Typography>\r\n                                }\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <LinearProgress\r\n                                    variant={'determinate'}\r\n                                    color={'secondary'}\r\n                                    value={Math.round(100 * puzzle.techniques.length / maxNumberOfTechniques)}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                <Button color={'primary'} size={'small'} onClick={() => props.onPuzzleSelect(puzzle, false)} variant={'contained'}>Play</Button>\r\n                                <span> </span>\r\n                                {hasProgress &&\r\n                                <Button size={'small'} onClick={() => props.onPuzzleSelect(puzzle, true)} variant={'outlined'}>Continue</Button>\r\n                                }\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {showTechniques &&\r\n                                puzzle.techniques.join(', ')\r\n                                }\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    )\r\n                })}\r\n            </TableBody>\r\n        </Table>\r\n    )\r\n\r\n    const mobileTable = (\r\n        <>\r\n            {puzzles.map((puzzle, i) => {\r\n                const solved = userData.solved.includes(puzzle.boardData)\r\n                const hasProgress = !!userData.progress[puzzle.boardData]\r\n                return (\r\n                    <Paper key={i} variant={'outlined'} style={{ padding: 16, marginBottom: 16, background: boardBackgroundColor }}>\r\n                        <div style={{ marginLeft: -16, marginRight: -16, marginTop: -16 }}>\r\n                            <LinearProgress\r\n                                variant={'determinate'}\r\n                                color={'secondary'}\r\n                                value={Math.round(100 * puzzle.techniques.length / maxNumberOfTechniques)}\r\n                            />\r\n                        </div>\r\n                        <h4>\r\n                            {puzzle.name}\r\n                        </h4>\r\n                        <div>\r\n                            {solved &&\r\n                            <Typography color={'primary'}>Solved!</Typography>\r\n                            }\r\n                        </div>\r\n\r\n                        <div>\r\n                            <Button color={'primary'} size={'small'} onClick={() => props.onPuzzleSelect(puzzle, false)} variant={'contained'}>Play</Button>\r\n                            <span> </span>\r\n                            {hasProgress &&\r\n                            <Button size={'small'} onClick={() => props.onPuzzleSelect(puzzle, true)} variant={'outlined'}>Continue</Button>\r\n                            }\r\n                        </div>\r\n                        <div>\r\n                            {showTechniques &&\r\n                            puzzle.techniques.join(', ')\r\n                            }\r\n                        </div>\r\n                    </Paper>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                height: '100%',\r\n                display: 'flex',\r\n                flexDirection: 'column'\r\n            }}\r\n        >\r\n            <div style={{ marginBottom: 16 }}>\r\n                <div style={{ display: 'flex', overflowX: 'auto' }}>\r\n                    <div key={'custom'}>\r\n                        <Button\r\n                            onClick={() => setSelectedTab({ type: 'custom' })}\r\n                            disabled={selectedTab.type === 'custom'}\r\n                        >\r\n                            Custom\r\n                        </Button>\r\n                    </div>\r\n                    {difficulties.map((difficulty) => {\r\n                        return (\r\n                            <div key={difficulty}>\r\n                                <Button\r\n                                    onClick={() => setSelectedTab({ type: 'difficulty', difficulty})}\r\n                                    disabled={selectedTab.type === 'difficulty' && selectedTab.difficulty === difficulty}\r\n                                >\r\n                                    {difficulty}\r\n                                </Button>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <Divider />\r\n            </div>\r\n            <div style={{ marginBottom: 16 }}>\r\n                <Button onClick={() => setShowTechniques(!showTechniques)} variant={'outlined'}>\r\n                    Show/Hide techniques required\r\n                </Button>\r\n            </div>\r\n            <div style={{ flex: '1 1 auto', minHeight: 0}}>\r\n                <div style={{ height: '100%', overflowY: 'auto'}}>\r\n                    {isMobile\r\n                        ? mobileTable\r\n                        : table\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Board } from '../core/types'\r\nimport { allCandidates, getAllPoints, getBoardCell } from '../core/utils/sudokuUtils'\r\nimport { groupBy } from '../core/utils/misc'\r\nimport {\r\n    backgroundColor, backgroundDisabledColor,\r\n    borderHardColor,\r\n    getContrastText,\r\n    selectedDigitHighlightColor\r\n} from '../theme'\r\n\r\ntype DigitProps = {\r\n    digit: number\r\n    finished: boolean\r\n    selected: boolean\r\n    onClick: () => void\r\n}\r\n\r\nconst DigitCircle = (props: DigitProps) => {\r\n    let bgColor = backgroundColor\r\n    if(props.finished) bgColor = backgroundDisabledColor\r\n    if(props.selected) bgColor = selectedDigitHighlightColor\r\n    return (\r\n        <button\r\n            onClick={props.onClick}\r\n            style={{\r\n                backgroundColor: bgColor,\r\n                color: getContrastText(bgColor),\r\n                border: '1px solid',\r\n                borderColor: borderHardColor,\r\n                padding: 4,\r\n                font: 'inherit',\r\n                cursor: 'pointer',\r\n                outline: 'inherit',\r\n\r\n                borderRadius: '50%',\r\n                height: 35,\r\n                width: 35,\r\n                margin: 0,\r\n            }}\r\n        >\r\n            {props.digit}\r\n        </button>\r\n    )\r\n}\r\n\r\ntype DigitSelectorProps = {\r\n    board: Board\r\n    onClickDigit: (digit: number) => void\r\n    selectedDigit: number | null\r\n}\r\n\r\nconst getFinishedDigits = (board: Board): number[] => {\r\n    const digits = getAllPoints()\r\n        .map(point => getBoardCell(board, point).value)\r\n        .filter(value => value !== null)\r\n\r\n    return Object.entries(groupBy(digits, (d) => d))\r\n        .filter(([digit, list]) => list.length === 9)\r\n        .map(([digit]) => Number(digit))\r\n}\r\n\r\nexport const DigitSelector = (props: DigitSelectorProps) => {\r\n    const board = props.board\r\n    const selectedDigit = props.selectedDigit\r\n    const finishedDigits = React.useMemo(() => getFinishedDigits(board), [board])\r\n\r\n    return (\r\n      <div\r\n        style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexWrap: 'wrap' }}\r\n      >\r\n        {allCandidates.map(digit => {\r\n            return (\r\n                <div style={{ paddingRight: 4 }} key={digit}>\r\n                    <DigitCircle\r\n                        digit={digit}\r\n                        finished={finishedDigits.includes(digit)}\r\n                        selected={selectedDigit === digit}\r\n                        onClick={() => props.onClickDigit(digit)}\r\n                    />\r\n                </div>\r\n            )\r\n        })}\r\n      </div>\r\n    )\r\n}","import React from 'react'\r\nimport Accordion from '@material-ui/core/Accordion'\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Divider from '@material-ui/core/Divider'\r\n\r\nconst basic = `\r\nThe basic rules of sudoku are:\r\nThe digits 1-9 must occur once in each row, column, and box.\r\n`\r\n\r\nconst fullHouse = `\r\nA house in sudoku is a row, column, or box. \r\nWhen there is only one candidate left in a house, you have a full house. \r\nJust place the last candidate.\r\n`\r\n\r\nconst hiddenSingle = `\r\nIf a candidate can only go in one cell in a house, and there are still other possible candidates for this cell, it's called a hidden single.\r\nThis is an easy technique, especially with highlighting, since the candidate can only go in one cell. \r\n`\r\n\r\nconst nakedSingle = `\r\nA naked single is when a cell can only contain one candidate. \r\nA full house is also a naked single, but we differentiate between the two because proper naked singles are harder to find.\r\nThe reason they may be hard to find is that the same candidate can still be possible in other cells in the house.\r\nIn some cases it can be really tricky to find, but most often it's fairly easy.\r\n`\r\n\r\nconst pointer = `\r\nA pointer is when all of a candidate in a box occur on the same line (row or column).\r\nThe candidate can be eliminated from the rest of the line outside the box.\r\n`\r\n\r\nconst inversePointer = `\r\nAn inverse pointer is when all of a candidate on a line is within the same box.\r\nThe candidate can be eliminated from the rest of the box.\r\n`\r\n\r\nconst nakedPair = `\r\nA naked pair is when 2 candidates occur in 2 cells of a house, and there are no other candidates in these cells.\r\nThe 2 candidates can be eliminated from the rest of the house.\r\nThe same logic applies for 3 and 4 candidates in 3 or 4 cells.   \r\n`\r\n\r\nconst hiddenPair = `\r\nA hidden pair is when the only location for 2 candidates in a house is in the same 2 cells.\r\nThe rest of the candidates in these two cells can be eliminated. The same logic applies for 3 and 4 candidates in 3 or 4 cells.\r\n\r\nYou can spot hidden pairs by looking at each candidate and see if it's represented in only two cells in a house.\r\nCheck the house to see if there is a second candidate in those cells as well. Can be quite tricky to spot.\r\n`\r\n\r\nconst xWingAndOtherFish = `\r\nAn x-wing looks like the four corners of a rectangle. The same candidate is in each corner.\r\nThe requirement is that either both rows or both columns has the candidate in only the corners.\r\n\r\nIf both rows, the candidate can be eliminated from the columns.\r\nIf both columns, the candidate can be eliminated from the rows.\r\n\r\nA more difficult versions exist for when there is 3 rows/cols, called swordfish.\r\nIn that case, all points don't need the candidate for it work. \r\nThe only requirement is that all cells has the candidate in the same 3 rows and 3 columns,\r\nand that either all 3 rows has the candidate in only the three columns, or vice versa.\r\n\r\nIf that wasn't hard enough, there is also a jellyfish with 4 rows/cols as well.\r\n\r\nTo spot these, use highlighting :) x-wings are pretty easy to find, while swordfish and jellyfish is pretty hard.\r\n\r\n...and if that wasn't enough, there's also finned fish, and sashimi fish.\r\n\r\nA finned fish happens when you almost have a fish, but there are some extra cells with the candidate in a row/col.\r\nThese cells make up a \"fin\". Quite annoying, but there is hope. \r\nCheck if setting the candidate in the fin would produce the same eliminations as the fish without the fin.\r\nIf so, go ahead and make the eliminations!\r\n\r\nA finned sashimi fish is more or less the same as a finned fish. \r\nThe only difference is that with sashimi, removing the fin would simply leave a single on that row/col, destroying the fish in the process. \r\nOne could say that the only reason there is a fish in the first place in this case is because there is a fin. \r\n\r\nSide note: You can apply this same trick to most other techniques as well. \r\nIf there is something that annoyingly precludes you from using a technique, check if setting the digit in those other annoying cells has any overlap with the technique you want to use. If so, you can make the elimination! \r\n`\r\n\r\nconst swordfish = `\r\nSee x-wing\r\n`\r\n\r\nconst jellyfish = `\r\nSee x-wing\r\n`\r\n\r\nconst skyscraper = `\r\nSee x-wing first. A skyscraper is almost the same, except that one corner is not aligned on a row/col.\r\nThe row/col that is aligned can still be used to deduce that one of the cells that are not aligned must have the candidate.\r\nIf these two cells has any overlap in the cells they affect, the candidate can be eliminated from those cells.\r\nTo spot these, look for almost-x-wings.\r\n`\r\n\r\nconst uniqueRectangle = `\r\nThere are many types of unique rectangles, but the easiest one to spot is when you have a naked pair in a row,\r\nand another naked pair in a col, where one of the cells overlap. This forms an L-shape of cells with the same two candidates.\r\nTo form a rectangle, we need the last corner. In this corner, the two candidates can be eliminated.\r\nWhy? Because otherwise the sudoku cannot be unique, and all sudokus must be unique. \r\nYou'll just have to stare at this for a while to convince yourself it's true\r\n\r\nTo spot it, look for a naked pair in a row or col. Now look for a second pair originating from this pair.\r\n`\r\n\r\nconst emptyRectangle = `\r\nThe name empty rectangle can be confusing, so let's just explain the technique instead of the name.\r\n\r\nLook at a candidate in a box. If it forms an L-shape, we have a possible empty rectangle. (Tip: 2 cells are always L-shaped).\r\nNow look at the same candidate outside the box. Can you find a row or column where there are only two possible cells for this candidate?\r\nIf so, check if one of those eliminates an entire leg of the L-shape if set. If it does, the result will be a pointer.\r\nNow check the other cell in the row/col. If this cell \"sees\" the same cells as the pointer, the candidate can be eliminated from those cells.\r\n`\r\n\r\nconst bugPlus1 = `\r\nA binary universal grave or BUG is what happens when there are only two candidates in each cell, \r\nand each of those candidates can only go in one of two cells in each house. \r\nThis situation implies that the sudoku is not unique, and is therefore not a valid state of the board.\r\n\r\nA BUG+1 is what happens when you have a BUG, but ONE cell has an additional candidate.\r\nTo avoid the BUG, we HAVE to place this candidate in that cell.\r\n\r\nTo spot a BUG, see if all cells only have two possible candidates, except ONE cell. This usually happens towards the end of the sudoku.\r\nNow see if each of these candidates can go in only two cells in each row/col/box (except the additional candidate).\r\nIf so, go ahead and place the additional candidate in the cell where there are three candidates. \r\n`\r\n\r\nconst xyWing = `\r\nIn an xyWing we only consider cells with 2 possible candidates.\r\nThe idea is that you have a \"pivot\" cell and two \"pincers\".\r\nThe pivot has two candidates, x y. The two pincers both see the pivot, and has candidates x z and y z. In summary, we have the following cells:\r\n\r\npivot: xy\r\npincer 1: xz\r\npincer 2: yz\r\n\r\nIf the pivot had the digit x, the cell x z would be z (since x is eliminated).\r\nIf the pivot had the digit y, the cell y z would be z (since y is eliminated).\r\n\r\nTherefore, all cells that sees the two pincers can have z eliminated.\r\n`\r\n\r\nconst xyzWing = `\r\nxyzWing is the same as xyWing, except now the \"pivot\" can also have the z candidate.\r\nSo we have three cells:\r\n\r\npivot: xyz\r\npincer 1: xz\r\npincer 2: yz\r\n\r\nThe difference from xyWing is that now we can only eliminate z from cells that sees both pincers AND the pivot.\r\n`\r\n\r\nconst remotePairChain = `\r\nFill in all candidates. \r\nFind all cells with only two candidates. \r\nThe two candidates must be the same for all cells in the chain, hence \"remote pair\".\r\nPick a cell. \r\n\r\nNow start by saying to yourself \"candidate A is not true\". Look at the connected cells with the same two candidates you found earlier.\r\nPick one, and say to yourself \"candidate A is true\". Now continue alternating between these two for each cell you visit.\r\n\r\nIf at any point you say that the candidate is true, you can check if the cell \"sees\" the same cells as the cell you started with.\r\nIf so, both candidates can be eliminated from those cells.\r\n\r\nWhy? You started by saying A is NOT true, and ended by saying A IS true. If, however, you start by saying it IS true, the starting cell is true.\r\nSo the conclusion is that the candidate is either in the starting cell or the ending cell. \r\n`\r\n\r\nconst xChain = `\r\nFill in all candidates. \r\nLook at only one candidate. \r\nPick a cell with the candidate.\r\n \r\nStart by saying to yourself \"the candidate is NOT true\". Now look at cells affected by this cell.\r\nIf removing the candidate from the starting cell leads to the candidate being set in a different cell, \r\ngo to that cell and say \"the candidate IS true\". Now continue like this, alternating between true and not true.\r\n\r\nIf at any point you say that the candidate is true, you can check if the cell \"sees\" the same cells as the cell you started with.\r\nIf so, the candidate can be eliminated from those cells.\r\n\r\nWhy? You started by saying the candidate was not true. That lead to the ending cell being true.\r\nThe alternative was that the starting cell WAS true. So either the starting cell is true, or the ending cell is true.\r\n`\r\n\r\nconst xyChain = `\r\nSee xChain.\r\n\r\nFill in all candidates. \r\nLook at only cells with two possible candidates. \r\nPick a cell.\r\n\r\nStart by saying to yourself, \"candidate A is NOT true\". Now follow the chain, alternating true/not true. \r\nIf you end up on a cell where the candidate is the same as the starting candidate, and is true, check for cells that \"sees\" both the start and the end.\r\nThe candidate can be eliminated from these points. \r\n`\r\n\r\nconst techniqueDescriptions = {\r\n    basic,\r\n    fullHouse,\r\n    hiddenSingle,\r\n    nakedSingle,\r\n    pointer,\r\n    inversePointer,\r\n    nakedPair,\r\n    hiddenPair,\r\n    'xWing and fish in general': xWingAndOtherFish,\r\n    swordfish,\r\n    jellyfish,\r\n    skyscraper,\r\n    uniqueRectangle,\r\n    emptyRectangle,\r\n    bugPlus1,\r\n    xyWing,\r\n    xyzWing,\r\n    remotePairChain,\r\n    xChain,\r\n    xyChain\r\n}\r\n\r\nexport const Help = (props) => {\r\n    return (\r\n        <div>\r\n            <h3>How to play</h3>\r\n            <Divider />\r\n            <Typography>\r\n                Note: On desktop there are keybinds for most buttons.\r\n                <ul>\r\n                    <li>Digit - Sets/removes a digit in selected cell. If you have selected more than one cell, it sets as candidate instead</li>\r\n                    <li>Candidate - Sets/removes candidate in selected cells</li>\r\n                    <li>Number selectors (1-9) - Sets digit in selected cells. If no cells selected, enabled/disables highlighting for the digit</li>\r\n                    <li>Undo - Undo the last move</li>\r\n                    <li>Deselect all - Deselect any selected cells. Useful if you want number highlighting using the number selector</li>\r\n                    <li>Hints - Toggle hints</li>\r\n                    <li>\r\n                        Solver - Toggle solver. Note that opening the solver will create a new board based on the currently set digits. It will fill in all candidates.\r\n                        But don't worry, when you close the solver you'll get right back to the board you had before opening the solver.\r\n                    </li>\r\n                </ul>\r\n            </Typography>\r\n            <br />\r\n            <h3>Techniques</h3>\r\n            <Divider />\r\n            <Typography>\r\n                Below you'll find some short descriptions and hints for each technique.<br />\r\n                If you want more detailed explanations with examples, I recommend the excellent guide over at\r\n\r\n                <a href='http://hodoku.sourceforge.net/en/techniques.php' target='_blank' rel=\"noopener noreferrer\" style={{ color: 'lightblue' }}>\r\n                    <span> HoDoKu</span>\r\n                </a>\r\n            </Typography>\r\n            <br />\r\n\r\n            {Object.entries(techniqueDescriptions).map(([name, d]) => {\r\n                return (\r\n                    <Accordion>\r\n                        <AccordionSummary>{name}</AccordionSummary>\r\n                        <AccordionDetails>\r\n                            <Typography>{d.trim().split(/\\r\\n|\\n/g).map(line => (<>{line}<br/></>))}</Typography>\r\n                        </AccordionDetails>\r\n                    </Accordion>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import { Board } from '../types'\r\nimport { canPutDigit, cloneBoard, getPointId } from './sudokuUtils'\r\n\r\nexport const hasUniqueSolution = (board: Board) => {\r\n    board = cloneBoard(board)\r\n    const count = getSolutionCount(board)\r\n    return count === 1\r\n}\r\n\r\nconst getSolutionCount = (board: Board, x = 0, y = 0) => {\r\n    if(x === 9){\r\n        x = 0\r\n        y++\r\n        if(y === 9){\r\n            return 1 // Got to the end of the board, solution found\r\n        }\r\n    }\r\n    if(board[y][x].value !== null){\r\n        return getSolutionCount(board, x+1, y)\r\n    }\r\n\r\n    let count = 0\r\n    for(let n = 1; n <= 9; n++){\r\n        if(canPutDigit(board, {x, y, id: getPointId(x, y)}, n)){\r\n            board[y][x].value = n\r\n            count += getSolutionCount(board, x+1,y)\r\n            if(count >= 2){\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    board[y][x].value = null\r\n    return count\r\n}","import { capitalize } from './misc'\r\n\r\nconst adjectives = {\r\n    easy: [\r\n        'tame',\r\n        'friendly',\r\n        'hopeful',\r\n        'brief',\r\n        'lucky',\r\n        'blissful',\r\n        'adorable',\r\n        'nice',\r\n        'well meaning',\r\n        'agreeable',\r\n        'calm',\r\n        'careless',\r\n        'relaxed',\r\n        'breathless',\r\n        'cute',\r\n        'blue eyed'\r\n    ],\r\n    medium: [\r\n        'aspiring',\r\n        'cheerful',\r\n        'cooperative',\r\n        'eager',\r\n        'capable',\r\n        'secretive',\r\n        'lovely',\r\n        'speedy',\r\n        'gentle',\r\n        'witty',\r\n        'faint',\r\n        'whispering',\r\n        'cozy',\r\n        'happy',\r\n        'fresh',\r\n        'fancy',\r\n        'prickly',\r\n        'non allergic'\r\n    ],\r\n    hard: [\r\n        'bold',\r\n        'fierce',\r\n        'modern',\r\n        'bountiful',\r\n        'courageous',\r\n        'brainy',\r\n        'alluring',\r\n        'careful',\r\n        'brave',\r\n        'lively',\r\n        'wooden',\r\n        'uneven',\r\n        'pickled',\r\n        'flaky',\r\n        'scarce',\r\n        'numeric',\r\n        'ragged',\r\n        'covert'\r\n    ],\r\n    expert: [\r\n        'murky',\r\n        'strange',\r\n        'crooked',\r\n        'outstanding',\r\n        'fearless',\r\n        'passionate',\r\n        'outrageous',\r\n        'mysterious',\r\n        'sizable',\r\n        'incalculable',\r\n        'substantial',\r\n        'sparse',\r\n        'algorithmic',\r\n        'ingenious',\r\n        'interesting',\r\n        'draconian',\r\n        'glorious',\r\n        'major',\r\n        'obscure'\r\n    ],\r\n    artisan: [\r\n        'artisanal',\r\n        'futuristic',\r\n        'irregular',\r\n        'defiant',\r\n        'determined',\r\n        'diligent',\r\n        'cumbersome',\r\n        'majestic',\r\n        'astonishing',\r\n        'indescribable',\r\n        'incomparable',\r\n        'prestigious',\r\n        'malnourished',\r\n        'inexplicable',\r\n        'wondrous',\r\n        'immovable',\r\n        'fortified',\r\n        'bothersome',\r\n        'concealed'\r\n    ],\r\n    master: [\r\n        'vast',\r\n        'great',\r\n        'masterful',\r\n        'eternal',\r\n        'astronomical',\r\n        'enchanting',\r\n        'erratic',\r\n        'massive',\r\n        'divine',\r\n        'unnatural',\r\n        'dark',\r\n        'impenetrable',\r\n        'elusive',\r\n        'epic',\r\n        'absurd',\r\n        'great',\r\n        'immortal',\r\n        'perfected',\r\n        'engineered',\r\n        'gigantic',\r\n        'veiled'\r\n    ],\r\n    jedi: [\r\n        'incredulous',\r\n        'forceful',\r\n        'ominous',\r\n        'immense',\r\n        'combative',\r\n        'disastrous',\r\n        'ruthless',\r\n        'imperial',\r\n        'biblical',\r\n        'awe inspiring',\r\n        'terror inducing',\r\n        'insurmountable',\r\n        'unfathomable',\r\n        'mind bending',\r\n        'malicious',\r\n        'measureless',\r\n        'boundless',\r\n    ]\r\n}\r\n\r\nconst subject = {\r\n    easy: [\r\n        'teddy bear',\r\n        'child',\r\n        'companion',\r\n        'old lady',\r\n        'gungan',\r\n        'disney character',\r\n        'mouse',\r\n        'cat',\r\n        'neighbor',\r\n        'friend',\r\n        'farm animal',\r\n        'pokemon',\r\n        'dog',\r\n        'musician',\r\n        'coffee cup',\r\n        'soda bottle'\r\n    ],\r\n    medium: [\r\n        'colleague',\r\n        'buddy',\r\n        'do-gooder',\r\n        'rain forrest',\r\n        'orangutan',\r\n        'meerkat',\r\n        'swimming pool',\r\n        'loud speaker',\r\n        'pillow',\r\n        'blanket',\r\n        'rain forrest',\r\n        'willow tree',\r\n        'broomstick',\r\n        'pyjamas',\r\n        'birthday cake',\r\n        'hitch hiker',\r\n        'forrest canopy',\r\n        'sloth',\r\n        'cuisine',\r\n    ],\r\n    hard: [\r\n        'candidate',\r\n        'middle manager',\r\n        'gang member',\r\n        'entrance',\r\n        'columns',\r\n        'vessel',\r\n        'vehicle',\r\n        'lion',\r\n        'elephant',\r\n        'cheetah',\r\n        'coral reef',\r\n        'engineer',\r\n        'barracks',\r\n        'house',\r\n        'coil',\r\n        'equipment',\r\n        'gadget',\r\n        'person of interest',\r\n        'shell',\r\n        'gorilla'\r\n    ],\r\n    expert: [\r\n        'skyscraper',\r\n        'sea creature',\r\n        'board of executives',\r\n        'stadium',\r\n        'detective',\r\n        'commission',\r\n        'adventure',\r\n        'legend',\r\n        'catacomb',\r\n        'craftsman',\r\n        'spell',\r\n        'problem',\r\n        'ransom',\r\n        'cathedral',\r\n        'hall',\r\n        'myth',\r\n        'investigator',\r\n        'quest',\r\n        'wood elf'\r\n    ],\r\n    artisan: [\r\n        'sea monster',\r\n        'executive officer',\r\n        'admiral',\r\n        'hydrogen blimp',\r\n        'president',\r\n        'warden',\r\n        'alien',\r\n        'space ship',\r\n        'ghost',\r\n        'emperor',\r\n        'dictator',\r\n        'creature',\r\n        'mind',\r\n        'eyes',\r\n        'spirit',\r\n        'diamond',\r\n        'fire',\r\n        'fortress',\r\n        'bunker'\r\n    ],\r\n    master: [\r\n        'mountain',\r\n        'ocean',\r\n        'volcano',\r\n        'earthquake',\r\n        'tsunami',\r\n        'avalanche',\r\n        'eruption',\r\n        'hurricane',\r\n        'lightning',\r\n        'prisoner',\r\n        'antagonist',\r\n        'power bolt',\r\n        'moon',\r\n        'aurora',\r\n        'aftermath',\r\n        'energy'\r\n    ],\r\n    jedi: [\r\n        'sith lord',\r\n        'universe',\r\n        'solar system',\r\n        'galaxy',\r\n        'solar storm',\r\n        'super nova',\r\n        'black hole',\r\n        'hero killer',\r\n        'chasm',\r\n        'tomb',\r\n        'omen',\r\n        'dreamscape',\r\n        'dimension',\r\n        'destiny',\r\n        'force',\r\n        'ascension',\r\n        'light'\r\n    ]\r\n}\r\n\r\nconst rand = (n: number) => Math.floor((Math.random()*n))\r\n\r\nexport const generateName = (difficulty: string) => {\r\n    return [\r\n        capitalize(adjectives[difficulty][rand(adjectives[difficulty].length)]),\r\n        subject[difficulty][rand(subject[difficulty].length)],\r\n    ].join(' ')\r\n}","import { Board } from '../types'\r\nimport { getOverallDifficulty, getTechniquesRequiredForSolvingBoard } from '../solve'\r\nimport { prepareBoardForSolver } from '../sudoku'\r\nimport { generateName } from './generateName'\r\n\r\nexport type BoardMetaData = {\r\n    name: string\r\n    techniques: string[]\r\n    difficulty: {\r\n        level: number\r\n        difficulty: string\r\n    }\r\n    givens: number\r\n    boardData: string\r\n}\r\n\r\nexport const getBoardMetaData = (board: Board): BoardMetaData => {\r\n    board = prepareBoardForSolver(board)\r\n    const techniques = getTechniquesRequiredForSolvingBoard(board)\r\n    const difficulty = getOverallDifficulty(techniques)\r\n    let givens = 0\r\n    let boardData = ''\r\n    for(let y = 0; y < 9; y++){\r\n        for(let x = 0; x < 9; x++){\r\n            const cell = board[y][x]\r\n            boardData += cell.value === null ? '0' : String(cell.value)\r\n            if(cell.given){\r\n                givens++\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        name: generateName(difficulty.difficulty),\r\n        techniques,\r\n        difficulty,\r\n        givens,\r\n        boardData\r\n    }\r\n}","import React from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { boardBackgroundColor } from '../theme'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport { hasUniqueSolution } from '../core/utils/hasUniqueSolution'\r\nimport { boardFromStr } from '../core/sudoku'\r\nimport { getBoardMetaData } from '../core/utils/getBoardMetaData'\r\nimport { actions } from '../index'\r\nimport { UserData } from '../state'\r\nimport { unique, uniqueBy } from '../core/utils/misc'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUserData } from '../selectors'\r\nimport format from 'date-fns/format'\r\n\r\nexport type ImportExportProps = {}\r\n\r\nconst looksLikeUserData = (obj: any) => {\r\n    return Array.isArray(obj.solved) && obj.progress && Array.isArray(obj.custom)\r\n}\r\n\r\nconst downloadJsonStr = (text, fileName) => {\r\n    const fileType = 'application/json'\r\n    const blob = new Blob([text], { type: fileType })\r\n    const a = document.createElement('a')\r\n    a.download = fileName\r\n    a.href = URL.createObjectURL(blob)\r\n    a.dataset.downloadurl = [fileType, a.download, a.href].join(':')\r\n    a.style.display = 'none'\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n    setTimeout(() => URL.revokeObjectURL(a.href), 1500)\r\n}\r\n\r\nconst mergeUserData = (oldData: UserData, newData: Partial<UserData>) => {\r\n    return {\r\n        solved: unique([...(newData.solved ?? []), ...oldData.solved]),\r\n        progress: {...oldData.progress, ...newData.progress},\r\n        custom: uniqueBy([...(newData.custom ?? []), ...oldData.custom], (a, b) => a.meta?.boardData === b.meta?.boardData)\r\n    }\r\n}\r\n\r\nexport const ImportExport = (props: ImportExportProps) => {\r\n    const userData = useSelector(selectUserData)\r\n    const [importState, setImportState] = React.useState<string | null>(null)\r\n    const [importBoardStr, setImportBoardStr] = React.useState('')\r\n    const [boardStrValidation, setBoardStrValidation] = React.useState<string | null>(null)\r\n\r\n    const onImport = React.useCallback((str: string) => {\r\n        try{\r\n            const obj = JSON.parse(str)\r\n            if (looksLikeUserData(obj)) {\r\n                const newUserData = mergeUserData(userData, obj)\r\n                actions.setUserData(newUserData)\r\n                setImportState('Import successful!')\r\n                return\r\n            }\r\n        }catch(err){}\r\n\r\n        setImportState('Failed to import. Please check that the save file was exported from this app.')\r\n    }, [userData])\r\n\r\n    const onImportBoardStr = React.useCallback(() => {\r\n        const str = importBoardStr.trim()\r\n        if (str.length !== 81) {\r\n            setBoardStrValidation('Board must be 81 characters long')\r\n            return\r\n        }\r\n        const board = boardFromStr(str)\r\n        if (!hasUniqueSolution(board)) {\r\n            setBoardStrValidation('That sudoku is not unique')\r\n            return\r\n        }\r\n        const meta = getBoardMetaData(board)\r\n        const newUserData = mergeUserData(userData, {\r\n            custom: [{ meta, date: new Date().toISOString() }]\r\n        })\r\n        actions.setUserData(newUserData)\r\n        setBoardStrValidation('Import successful! Go to puzzle select to play the imported sudoku')\r\n    }, [importBoardStr, userData])\r\n\r\n    const onExport = React.useCallback(() => {\r\n        const time = format(new Date(), 'yyyyMMdd')\r\n        downloadJsonStr(JSON.stringify(userData, null, 2), `sudoku_${time}.json`)\r\n    }, [userData])\r\n\r\n    const onDrop = React.useCallback((acceptedFiles) => {\r\n        if (acceptedFiles.length === 0) {\r\n            return\r\n        }\r\n        const file = acceptedFiles[0]\r\n\r\n        const reader = new FileReader()\r\n        reader.onload = () => onImport(reader.result as string)\r\n        reader.readAsText(file)\r\n    }, [onImport])\r\n\r\n    const {getRootProps, getInputProps} = useDropzone({onDrop, maxFiles: 1})\r\n\r\n    return (\r\n        <div>\r\n            <h3>Import custom board</h3>\r\n\r\n            <TextField\r\n                type={'text'}\r\n                value={importBoardStr}\r\n                onChange={e => setImportBoardStr(e.target.value)}\r\n                fullWidth\r\n                variant={'outlined'}\r\n                placeholder={'Paste board string here (ex. 200030967400...)'}\r\n            />\r\n            {boardStrValidation !== null && boardStrValidation}\r\n            <br />\r\n            <Button\r\n                color={'primary'}\r\n                variant={'contained'}\r\n                onClick={onImportBoardStr}\r\n            >\r\n                Import\r\n            </Button>\r\n\r\n            <h3>Import save data</h3>\r\n\r\n            <div\r\n                {...getRootProps()}\r\n                style={{\r\n                    width: '100%',\r\n                    height: 200,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    background: boardBackgroundColor\r\n                }}\r\n            >\r\n                <input {...getInputProps()} />\r\n                <div>Drag a save file here, or click to select file</div>\r\n            </div>\r\n            {importState !== null && importState}\r\n\r\n            <h3>Export save data</h3>\r\n\r\n            <Button\r\n                color={'primary'}\r\n                variant={'contained'}\r\n                onClick={onExport}\r\n            >\r\n                Export\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectHints } from '../selectors'\r\n\r\nexport const Hints = (props) => {\r\n    const hints = useSelector(selectHints)\r\n\r\n    return (\r\n        <div>\r\n            <h3>Hints</h3>\r\n            <p>If all candidates are placed in the current board, the following techniques are required to get the next digit</p>\r\n            <ul>\r\n                {hints.map((t, i) => <li key={i}>{t}</li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { BoardDisplay } from './board'\r\nimport { Solver } from './solver'\r\nimport { Point } from '../core/types'\r\nimport { boardFromStr } from '../core/sudoku'\r\nimport useEventListener from '@use-it/event-listener'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Button from '@material-ui/core/Button'\r\nimport { PuzzleSelect } from './puzzle-select'\r\nimport useMediaQuery  from '@material-ui/core/useMediaQuery'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport { DigitSelector } from './digit-selector'\r\nimport { Help } from './help'\r\nimport { ImportExport } from './import-export'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectHasError, selectIsComplete, selectSolution } from '../selectors'\r\nimport { actions } from '../index'\r\nimport { Hints } from './hints'\r\nimport { State } from '../state'\r\nimport { getContrastText, setValueColor } from '../theme'\r\n\r\nexport const mobileMediaQuery = '(max-width:960px)'\r\n\r\nconst dummyBoard = boardFromStr('000000000000000000000000000000000000000000000000000000000000000000000000000000000')\r\n\r\nexport function App(){\r\n    const [hintsOpen, setHintsOpen] = React.useState(false)\r\n    const [puzzleSelectOpen, setPuzzleSelectOpen] = React.useState(false)\r\n    const [importExportOpen, setImportExportOpen] = React.useState(false)\r\n    const [helpOpen, setHelpOpen] = React.useState(false)\r\n    const isMobile = useMediaQuery(mobileMediaQuery)\r\n\r\n    const inputMode = useSelector((state: State) => state.inputMode)\r\n    const solverState = useSelector((state: State) => state.game?.solver ?? null)\r\n    const boardStack = useSelector((state: State) => state.game?.boardStack ?? [])\r\n    const selectedCells = useSelector((state: State) => state.selectedCells)\r\n    const selectedDigit = useSelector((state: State) => state.selectedDigit)\r\n    const board = useSelector((state: State) => state.game?.board ?? dummyBoard)\r\n    const boardMetaData = useSelector((state: State) => state.game?.boardMetaData ?? null)\r\n\r\n    const solutionBoard = useSelector(selectSolution)\r\n    const isComplete = useSelector(selectIsComplete)\r\n    const hasError = useSelector(selectHasError)\r\n\r\n    const toggleSolver = React.useCallback(() => {\r\n        actions.toggleSolver(solutionBoard)\r\n    }, [solutionBoard])\r\n\r\n    const toggleHints = React.useCallback(() => {\r\n        setHintsOpen(x => !x)\r\n    }, [])\r\n\r\n    const onSetDigit = React.useCallback((digit: number, points: Point[]) => {\r\n        actions.setDigit(digit, points, solutionBoard)\r\n    }, [solutionBoard])\r\n\r\n    const onSelectDigit = React.useCallback((digit: number) => {\r\n        if (selectedCells.length > 0) {\r\n            actions.setDigit(digit, selectedCells, solutionBoard)\r\n        } else {\r\n            actions.selectDigit(digit)\r\n        }\r\n    }, [selectedCells, solutionBoard])\r\n\r\n    const clearSelected = React.useCallback(() => {\r\n        actions.setSelectedCells([])\r\n    }, [])\r\n\r\n    const onGlobalKeyDown = React.useCallback((e: KeyboardEvent) => {\r\n        if(e.key.toLowerCase() === 'a') actions.setInputMode('value')\r\n        if(e.key.toLowerCase() === 's') actions.setInputMode('candidates')\r\n        if(e.key.toLowerCase() === 'n') actions.undo()\r\n        if(e.key.toLowerCase() === 'c') toggleSolver()\r\n        if(e.key.toLowerCase() === 'h') toggleHints()\r\n        if(e.key.toLowerCase() === 'd') clearSelected()\r\n        if(/\\d/.test(e.key)){\r\n            const number = parseInt(e.key, 10)\r\n            if(number >= 1 && number <= 9){\r\n                if(selectedCells.length > 0){\r\n                    onSetDigit(number, selectedCells)\r\n                }else{\r\n                    onSelectDigit(number)\r\n                }\r\n            }\r\n        }\r\n    }, [toggleSolver, toggleHints, onSetDigit, selectedCells, clearSelected, onSelectDigit])\r\n\r\n    useEventListener('keydown', onGlobalKeyDown)\r\n\r\n    return (\r\n        <div style={{ height: '100%', minHeight: 0, display: 'flex', justifyContent: 'center' }}>\r\n            <div style={{ height: '100%', width: '100%', padding: isMobile ? 0 : 16, maxWidth: 800 }}>\r\n                <div style={{ height: '100%', display: 'flex', flexDirection: 'column', alignItems: 'stretch' }}>\r\n                    <Paper style={{ padding: 16, marginBottom: 16 }}>\r\n                        <div style={{ display: 'flex' }}>\r\n                            <div style={{ marginRight: 16 }}>\r\n                                <Button color='primary' variant='contained' onClick={() => setPuzzleSelectOpen(true)}>\r\n                                    Select puzzle\r\n                                </Button>\r\n                            </div>\r\n                            <div>\r\n                                <Button color='secondary' variant='contained' onClick={() => setImportExportOpen(true)}>\r\n                                    Import / Export\r\n                                </Button>\r\n                            </div>\r\n                            <div style={{ flex: 1, display: 'flex', justifyContent: 'flex-end' }}>\r\n                                <Button variant={'outlined'} onClick={() => setHelpOpen(true)}>\r\n                                    Help\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Paper>\r\n                    <Paper style={{ padding: 16, paddingLeft: isMobile ? 4 : 16, paddingRight: isMobile ? 4 : 16, flex: '1 1 auto', minHeight: 0, display: 'flex', flexDirection: 'column' }}>\r\n                        {boardMetaData &&\r\n                        <div style={{ display: 'flex', justifyContent: 'center', marginBottom: 16 }}>\r\n                            <h4 style={{ margin: 0 }}>{boardMetaData.name} - {boardMetaData.difficulty.difficulty}</h4>\r\n                        </div>\r\n                        }\r\n                        <div style={{ flex: '1 1 auto', minHeight: 0, display: 'flex', justifyContent: 'center', marginBottom: 16 }}>\r\n                            <BoardDisplay\r\n                                board={solverState ? solverState.boardBeforeSolve : board}\r\n                                solveResult={solverState?.solveResult ?? null}\r\n                                celebration={isComplete && !hasError}\r\n                            />\r\n                        </div>\r\n                        <div style={{ display: 'flex', justifyContent: 'center', flexWrap: 'wrap', marginBottom: 16 }}>\r\n                            <Button\r\n                                onClick={() => actions.setInputMode('value')}\r\n                                disabled={inputMode === 'value'}\r\n                                variant={'outlined'}\r\n                                size={'small'}\r\n                                style={{\r\n                                    ...inputMode === 'value'\r\n                                        ? {\r\n                                            backgroundColor: setValueColor,\r\n                                            color: getContrastText(setValueColor)\r\n                                        } : undefined,\r\n                                }}\r\n                            >\r\n                                {isMobile\r\n                                    ? 'Digit'\r\n                                    : 'Digit (a)'\r\n                                }\r\n                            </Button>\r\n                            <Button\r\n                                onClick={() => actions.setInputMode('candidates')}\r\n                                disabled={inputMode === 'candidates'}\r\n                                variant={'outlined'}\r\n                                size={'small'}\r\n                                style={{\r\n                                    ...inputMode === 'candidates'\r\n                                        ? {\r\n                                            backgroundColor: setValueColor,\r\n                                            color: getContrastText(setValueColor)\r\n                                        } : undefined,\r\n                                }}\r\n                            >\r\n                                {isMobile\r\n                                    ? 'Candidate'\r\n                                    : 'Candidate (s)'\r\n                                }\r\n                            </Button>\r\n                            <Button\r\n                                onClick={actions.undo}\r\n                                disabled={boardStack.length === 0}\r\n                                variant={'outlined'}\r\n                                size={'small'}\r\n                            >\r\n                                {isMobile\r\n                                    ? 'Undo'\r\n                                    : 'Undo (n)'\r\n                                }\r\n                            </Button>\r\n                            <Button\r\n                                onClick={clearSelected}\r\n                                disabled={selectedCells.length === 0}\r\n                                variant={'outlined'}\r\n                                size={'small'}\r\n                            >\r\n                                {isMobile\r\n                                    ? 'Deselect all'\r\n                                    : 'Deselect all (d)'\r\n                                }\r\n                            </Button>\r\n                            <Button\r\n                                onClick={toggleHints}\r\n                                variant={'outlined'}\r\n                                size={'small'}\r\n                                style={{\r\n                                    ...hintsOpen\r\n                                        ? {\r\n                                            backgroundColor: setValueColor,\r\n                                            color: getContrastText(setValueColor)\r\n                                        } : undefined,\r\n                                }}\r\n                            >\r\n                                {isMobile\r\n                                    ? 'Hints'\r\n                                    : 'Hints (h)'\r\n                                }\r\n                            </Button>\r\n                            <Button\r\n                                onClick={toggleSolver}\r\n                                disabled={hasError ?? false}\r\n                                variant={'outlined'}\r\n                                size={'small'}\r\n                                style={{\r\n                                    ...!!solverState\r\n                                        ? {\r\n                                            backgroundColor: setValueColor,\r\n                                            color: getContrastText(setValueColor)\r\n                                        } : undefined,\r\n                                }}\r\n                            >\r\n                                {isMobile\r\n                                    ? 'Solver'\r\n                                    : 'Solver (c)'\r\n                                }\r\n                            </Button>\r\n                        </div>\r\n                        <div>\r\n                            <DigitSelector\r\n                                board={board}\r\n                                onClickDigit={onSelectDigit}\r\n                                selectedDigit={selectedDigit}\r\n                            />\r\n                        </div>\r\n                    </Paper>\r\n                </div>\r\n            </div>\r\n            {hintsOpen &&\r\n            <Paper\r\n                style={{\r\n                    height: '100%',\r\n                    width: 300,\r\n                    padding: 16,\r\n                    marginRight: 16,\r\n                    overflowY: 'auto',\r\n                    ...isMobile\r\n                        ? {\r\n                            position: 'absolute',\r\n                            height: 'auto',\r\n                            width: 'auto',\r\n                            margin: 16,\r\n                            right: 0\r\n                        } : {}\r\n                }}\r\n            >\r\n                <Hints />\r\n                {isMobile &&\r\n                    <Button variant={'outlined'} onClick={toggleHints}>Close</Button>\r\n                }\r\n            </Paper>\r\n            }\r\n            {!!solverState &&\r\n            <Paper\r\n                style={{\r\n                    height: '100%',\r\n                    width: 300,\r\n                    padding: 16,\r\n                    overflowY: 'auto',\r\n                    ...isMobile\r\n                        ? {\r\n                            position: 'absolute',\r\n                            height: 'auto',\r\n                            width: 'auto',\r\n                            margin: 0,\r\n                            right: 0,\r\n                            opacity: '80%'\r\n                        } : {}\r\n                }}\r\n            >\r\n                <Solver\r\n                    board={solverState.solveResult?.board ?? solverState.boardBeforeSolve}\r\n                    solveResult={solverState.solveResult}\r\n                    onSolveResult={actions.setSolveResult}\r\n                    onPlayFromHere={actions.playFromSolver}\r\n                />\r\n            </Paper>\r\n            }\r\n            <Dialog\r\n                fullWidth\r\n                maxWidth={isMobile ? 'sm' : 'lg'}\r\n                open={puzzleSelectOpen}\r\n                onClose={() => setPuzzleSelectOpen(false)}\r\n            >\r\n                <Paper style={{ padding: 16 }}>\r\n                    <PuzzleSelect\r\n                        onPuzzleSelect={(puzzle, fromProgress) => {\r\n                            actions.startPuzzle(puzzle, fromProgress)\r\n                            setPuzzleSelectOpen(false)\r\n                        }}\r\n                    />\r\n                </Paper>\r\n            </Dialog>\r\n            <Dialog\r\n                fullWidth\r\n                maxWidth={isMobile ? 'sm' : 'md'}\r\n                open={helpOpen}\r\n                onClose={() => setHelpOpen(false)}\r\n            >\r\n                <Paper style={{ padding: 16 }}>\r\n                    <Help />\r\n                </Paper>\r\n            </Dialog>\r\n            <Dialog\r\n                fullWidth\r\n                maxWidth={isMobile ? 'sm' : 'md'}\r\n                open={importExportOpen}\r\n                onClose={() => setImportExportOpen(false)}\r\n            >\r\n                <Paper style={{ padding: 16 }}>\r\n                    <ImportExport />\r\n                </Paper>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}","import { Board, InputMode, Point, SolveResult } from './core/types'\r\nimport { BoardMetaData } from './core/utils/getBoardMetaData'\r\nimport { applyInputValue, boardFromStr, boardToStr, prepareBoardForSolver } from './core/sudoku'\r\nimport { boardHasError, boardIsComplete, pointsEqual } from './core/utils/sudokuUtils'\r\nimport { uniqueBy } from './core/utils/misc'\r\n\r\nexport type UserData = {\r\n    solved: string[]\r\n    custom: {\r\n        meta: BoardMetaData\r\n        date: string\r\n    }[]\r\n    progress: {\r\n        [key: string]: Board\r\n    }\r\n}\r\n\r\nexport type State = {\r\n    puzzles: BoardMetaData[],\r\n    userData: UserData\r\n    game: {\r\n        initialBoard: Board\r\n        board: Board\r\n        boardMetaData: BoardMetaData\r\n        boardStack: Board[]\r\n        solver: {\r\n            boardBeforeSolve: Board\r\n            solveResult: SolveResult | null\r\n        } | null\r\n    } | null\r\n    inputMode: InputMode\r\n    selectedCells: Point[]\r\n    selectedDigit: number | null\r\n}\r\n\r\nconst initialState: State = {\r\n    puzzles: [],\r\n    userData: {\r\n        solved: [],\r\n        custom: [],\r\n        progress: {}\r\n    },\r\n    game: null,\r\n    inputMode: 'value',\r\n    selectedCells: [],\r\n    selectedDigit: null\r\n}\r\n\r\ntype SetState = Partial<State> | ((state: State) => Partial<State>)\r\ntype Action = { type: string, state: SetState }\r\n\r\nexport const reducer = (state: State = initialState, action: Action) => {\r\n    return {\r\n        ...state,\r\n        ...(typeof action.state === 'function' ? action.state(state) : action.state)\r\n    }\r\n}\r\n\r\nexport type Storage = {\r\n    store: (data: UserData) => any\r\n}\r\n\r\n/*\r\nIntercepts changes to userData and puts it in storage\r\n */\r\nexport const createStorageMiddleware = (storage: Storage) => store => {\r\n    let prevUserData = store.getState().userData\r\n    return next => action => {\r\n        next(action)\r\n        const currUserData = store.getState().userData\r\n        if (prevUserData !== currUserData) {\r\n            storage.store(currUserData)\r\n            prevUserData = currUserData\r\n        }\r\n    }\r\n}\r\n\r\nconst omit = (obj, key) => {\r\n    obj = {...obj}\r\n    delete obj[key]\r\n    return obj\r\n}\r\n\r\nexport const createActions = dispatch => {\r\n    const setState = (type: string, state: SetState) => dispatch(({ state, type }))\r\n\r\n    const setInputMode = (inputMode: InputMode) => setState('setInputMode', { inputMode })\r\n    const setPuzzles = (puzzles: BoardMetaData[]) => setState('setPuzzles', { puzzles })\r\n    const setUserData = (userData: UserData) => setState('setUserData', { userData })\r\n    const selectDigit = (digit: number) => setState('setDigit', state => {\r\n        return {\r\n            selectedDigit: state.selectedDigit === digit ? null : digit\r\n        }\r\n    })\r\n    const setSelectedCells = (selectedCells: Point[]) => setState('setSelectedCells', { selectedCells })\r\n    const addSelectedCell = (cell: Point) => setState('addSelectedCell', state => {\r\n        return {\r\n            selectedCells: uniqueBy([...state.selectedCells, cell], pointsEqual)\r\n        }\r\n    })\r\n\r\n    const startGame = (board: Board, boardMetaData: BoardMetaData) => setState('startGame', state => {\r\n        return {\r\n            game: {\r\n                initialBoard: board,\r\n                board,\r\n                boardMetaData,\r\n                boardStack: [],\r\n                solver: (state.game?.solver ?? null) !== null\r\n                    ? {\r\n                        boardBeforeSolve: prepareBoardForSolver(board),\r\n                        solveResult: null\r\n                    }\r\n                    : null\r\n            },\r\n            selectedCells: [],\r\n            selectedDigit: null\r\n        }\r\n    })\r\n\r\n    const startPuzzle = (metaData: BoardMetaData, fromProgress: boolean) => setState('selectPuzzle', state => {\r\n        const originalBoard = boardFromStr(metaData.boardData)\r\n        const progress = fromProgress ? state.userData.progress[metaData.boardData] ?? null : null\r\n        const board = progress ? progress : originalBoard\r\n\r\n        return {\r\n            game: {\r\n                initialBoard: board,\r\n                board,\r\n                boardMetaData: metaData,\r\n                boardStack: [],\r\n                solver: (state.game?.solver ?? null) !== null\r\n                    ? {\r\n                        boardBeforeSolve: prepareBoardForSolver(board),\r\n                        solveResult: null\r\n                    }\r\n                    : null\r\n            },\r\n            selectedCells: [],\r\n            selectedDigit: null\r\n        }\r\n    })\r\n\r\n    const toggleSolver = (solutionBoard: Board | null) => setState('toggleSolver', state => {\r\n        if (!state.game || !solutionBoard) return state\r\n\r\n        if (state.game.solver) {\r\n            return {\r\n                game: {\r\n                    ...state.game,\r\n                    solver: null\r\n                }\r\n            }\r\n        } else {\r\n            if (boardHasError(state.game.board, solutionBoard)) {\r\n                return state\r\n            }\r\n            return {\r\n                game: {\r\n                    ...state.game,\r\n                    solver: {\r\n                        boardBeforeSolve: prepareBoardForSolver(state.game.board),\r\n                        solveResult: null\r\n                    }\r\n                },\r\n                selectedCells: [],\r\n                selectedDigit: null\r\n            }\r\n        }\r\n    })\r\n\r\n    const setSolveResult = (solveResult: SolveResult | null, boardBeforeSolve: Board) => setState('setSolveResult', state => {\r\n        if(!state.game) return state\r\n\r\n        return {\r\n            game: {\r\n                ...state.game,\r\n                solver: {\r\n                    boardBeforeSolve,\r\n                    solveResult\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    const playFromSolver = () => setState('playFromSolver', state => {\r\n        if (!state.game || !state.game.solver) {\r\n            return state\r\n        }\r\n\r\n        return {\r\n            game: {\r\n                ...state.game,\r\n                boardStack: [state.game.board, ...state.game.boardStack],\r\n                board: state.game.solver.boardBeforeSolve,\r\n                solver: null\r\n            }\r\n        }\r\n    })\r\n\r\n    const setDigit = (digit: number, points: Point[], solutionBoard: Board | null) => setState('setDigit', state => {\r\n        if (!state.game || !solutionBoard || state.game.solver) return state\r\n\r\n        const board = applyInputValue(state.game.board, points, digit, state.inputMode)\r\n        const boardStr = boardToStr(state.game.initialBoard)\r\n\r\n        let userData = state.userData\r\n        if(boardIsComplete(board) && !boardHasError(board, solutionBoard)){\r\n            userData = {\r\n                ...userData,\r\n                solved: [boardStr, ...userData.solved],\r\n                progress: omit(userData.progress, boardStr)\r\n            }\r\n        }else{\r\n            userData = {\r\n                ...userData,\r\n                progress: {\r\n                    ...userData.progress,\r\n                    [boardStr]: board\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            userData,\r\n            game: {\r\n                ...state.game,\r\n                board,\r\n                boardStack: [state.game.board, ...state.game.boardStack]\r\n            }\r\n        }\r\n    })\r\n\r\n    const undo = () => setState('undo', state => {\r\n        if (!state.game || state.game.solver) return state\r\n        if (state.game.boardStack.length === 0) return state\r\n\r\n        return {\r\n            game: {\r\n                ...state.game,\r\n                board: state.game.boardStack[0],\r\n                boardStack: state.game.boardStack.slice(1)\r\n            }\r\n        }\r\n    })\r\n\r\n    return {\r\n        setPuzzles,\r\n        setUserData,\r\n        selectDigit,\r\n        setSelectedCells,\r\n        addSelectedCell,\r\n        startGame,\r\n        startPuzzle,\r\n        toggleSolver,\r\n        setSolveResult,\r\n        playFromSolver,\r\n        setDigit,\r\n        setInputMode,\r\n        undo\r\n    }\r\n}","import { UserData } from './state'\r\n\r\nconst deserialize = (data: any): UserData => {\r\n    if(!data.solved){\r\n        data.solved = []\r\n    }\r\n    if(!data.progress){\r\n        data.progress = {}\r\n    }\r\n    if(!data.custom){\r\n        data.custom = []\r\n    }\r\n\r\n    return data\r\n}\r\nconst serialize = (data: UserData): string => {\r\n    return JSON.stringify(data)\r\n}\r\n\r\nconst localStorageGet = () => {\r\n    try{\r\n        const data = JSON.parse(localStorage.getItem('sudoku') ?? '{}')\r\n        return deserialize(data)\r\n    }catch(err){\r\n        return deserialize({})\r\n    }\r\n}\r\n\r\nconst localStorageSet = (value: UserData) => {\r\n    try{\r\n        localStorage.setItem('sudoku', serialize(value))\r\n    }catch(err){}\r\n}\r\n\r\nexport const loadUserData = (): UserData => {\r\n    return localStorageGet()\r\n}\r\nexport const storeUserData = (data: UserData) => {\r\n    localStorageSet(data)\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './gui/app'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport './index.css'\nimport { theme } from './theme'\nimport { Provider as ReduxProvider } from 'react-redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { applyMiddleware, createStore } from 'redux'\nimport { createActions, createStorageMiddleware, reducer } from './state'\nimport { loadUserData, storeUserData } from './storage'\nimport { BoardMetaData } from './core/utils/getBoardMetaData'\n\nconst storage = {\n    store: storeUserData\n}\n\nconst middleware = applyMiddleware(createStorageMiddleware(storage))\nconst enhancer = composeWithDevTools(middleware)\nexport const store = createStore(reducer, enhancer)\nexport const actions = createActions(store.dispatch)\n\nactions.setUserData(loadUserData())\n\nfetch(process.env.PUBLIC_URL + '/boards/boardsV7.txt')\n    .then(x => x.text())\n    .then(x => x\n        .split('\\n')\n        .filter(line => line.trim().length !== 0)\n        .map(line => JSON.parse(line) as BoardMetaData)\n    )\n    .then(puzzleData => actions.setPuzzles(puzzleData))\n\nReactDOM.render(\n  <React.StrictMode>\n      <ThemeProvider theme={theme}>\n          <CssBaseline>\n              <ReduxProvider store={store}>\n                <App />\n              </ReduxProvider>\n          </CssBaseline>\n      </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}